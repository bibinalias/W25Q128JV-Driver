
W25Q128JV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dbc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080050d0  080050d0  000150d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080050d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000023c  2000000c  080050e4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000248  080050e4  00020248  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dbc2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002300  00000000  00000000  0002dbfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a68  00000000  00000000  0002ff00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000920  00000000  00000000  00030968  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000053ad  00000000  00000000  00031288  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004111  00000000  00000000  00036635  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003a746  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002860  00000000  00000000  0003a7c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004f68 	.word	0x08004f68

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004f68 	.word	0x08004f68

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b97a 	b.w	8000520 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	468c      	mov	ip, r1
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	9e08      	ldr	r6, [sp, #32]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d151      	bne.n	80002f8 <__udivmoddi4+0xb4>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d96d      	bls.n	8000336 <__udivmoddi4+0xf2>
 800025a:	fab2 fe82 	clz	lr, r2
 800025e:	f1be 0f00 	cmp.w	lr, #0
 8000262:	d00b      	beq.n	800027c <__udivmoddi4+0x38>
 8000264:	f1ce 0c20 	rsb	ip, lr, #32
 8000268:	fa01 f50e 	lsl.w	r5, r1, lr
 800026c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000270:	fa02 f70e 	lsl.w	r7, r2, lr
 8000274:	ea4c 0c05 	orr.w	ip, ip, r5
 8000278:	fa00 f40e 	lsl.w	r4, r0, lr
 800027c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000280:	0c25      	lsrs	r5, r4, #16
 8000282:	fbbc f8fa 	udiv	r8, ip, sl
 8000286:	fa1f f987 	uxth.w	r9, r7
 800028a:	fb0a cc18 	mls	ip, sl, r8, ip
 800028e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000292:	fb08 f309 	mul.w	r3, r8, r9
 8000296:	42ab      	cmp	r3, r5
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x6c>
 800029a:	19ed      	adds	r5, r5, r7
 800029c:	f108 32ff 	add.w	r2, r8, #4294967295
 80002a0:	f080 8123 	bcs.w	80004ea <__udivmoddi4+0x2a6>
 80002a4:	42ab      	cmp	r3, r5
 80002a6:	f240 8120 	bls.w	80004ea <__udivmoddi4+0x2a6>
 80002aa:	f1a8 0802 	sub.w	r8, r8, #2
 80002ae:	443d      	add	r5, r7
 80002b0:	1aed      	subs	r5, r5, r3
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c0:	fb00 f909 	mul.w	r9, r0, r9
 80002c4:	45a1      	cmp	r9, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x98>
 80002c8:	19e4      	adds	r4, r4, r7
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 810a 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80002d2:	45a1      	cmp	r9, r4
 80002d4:	f240 8107 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	eba4 0409 	sub.w	r4, r4, r9
 80002e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e4:	2100      	movs	r1, #0
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d061      	beq.n	80003ae <__udivmoddi4+0x16a>
 80002ea:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ee:	2300      	movs	r3, #0
 80002f0:	6034      	str	r4, [r6, #0]
 80002f2:	6073      	str	r3, [r6, #4]
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0xc8>
 80002fc:	2e00      	cmp	r6, #0
 80002fe:	d054      	beq.n	80003aa <__udivmoddi4+0x166>
 8000300:	2100      	movs	r1, #0
 8000302:	e886 0021 	stmia.w	r6, {r0, r5}
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	f040 808e 	bne.w	8000432 <__udivmoddi4+0x1ee>
 8000316:	42ab      	cmp	r3, r5
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xdc>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2d0>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb65 0503 	sbc.w	r5, r5, r3
 8000326:	2001      	movs	r0, #1
 8000328:	46ac      	mov	ip, r5
 800032a:	2e00      	cmp	r6, #0
 800032c:	d03f      	beq.n	80003ae <__udivmoddi4+0x16a>
 800032e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	b912      	cbnz	r2, 800033e <__udivmoddi4+0xfa>
 8000338:	2701      	movs	r7, #1
 800033a:	fbb7 f7f2 	udiv	r7, r7, r2
 800033e:	fab7 fe87 	clz	lr, r7
 8000342:	f1be 0f00 	cmp.w	lr, #0
 8000346:	d134      	bne.n	80003b2 <__udivmoddi4+0x16e>
 8000348:	1beb      	subs	r3, r5, r7
 800034a:	0c3a      	lsrs	r2, r7, #16
 800034c:	fa1f fc87 	uxth.w	ip, r7
 8000350:	2101      	movs	r1, #1
 8000352:	fbb3 f8f2 	udiv	r8, r3, r2
 8000356:	0c25      	lsrs	r5, r4, #16
 8000358:	fb02 3318 	mls	r3, r2, r8, r3
 800035c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000360:	fb0c f308 	mul.w	r3, ip, r8
 8000364:	42ab      	cmp	r3, r5
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x134>
 8000368:	19ed      	adds	r5, r5, r7
 800036a:	f108 30ff 	add.w	r0, r8, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x132>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f200 80d1 	bhi.w	8000518 <__udivmoddi4+0x2d4>
 8000376:	4680      	mov	r8, r0
 8000378:	1aed      	subs	r5, r5, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000380:	fb02 5510 	mls	r5, r2, r0, r5
 8000384:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000388:	fb0c fc00 	mul.w	ip, ip, r0
 800038c:	45a4      	cmp	ip, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x15c>
 8000390:	19e4      	adds	r4, r4, r7
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x15a>
 8000398:	45a4      	cmp	ip, r4
 800039a:	f200 80b8 	bhi.w	800050e <__udivmoddi4+0x2ca>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	e79d      	b.n	80002e6 <__udivmoddi4+0xa2>
 80003aa:	4631      	mov	r1, r6
 80003ac:	4630      	mov	r0, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	f1ce 0420 	rsb	r4, lr, #32
 80003b6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ba:	fa07 f70e 	lsl.w	r7, r7, lr
 80003be:	fa20 f804 	lsr.w	r8, r0, r4
 80003c2:	0c3a      	lsrs	r2, r7, #16
 80003c4:	fa25 f404 	lsr.w	r4, r5, r4
 80003c8:	ea48 0803 	orr.w	r8, r8, r3
 80003cc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003d0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d4:	fb02 4411 	mls	r4, r2, r1, r4
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003e0:	fb01 f30c 	mul.w	r3, r1, ip
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1bc>
 80003ec:	19ed      	adds	r5, r5, r7
 80003ee:	f101 30ff 	add.w	r0, r1, #4294967295
 80003f2:	f080 808a 	bcs.w	800050a <__udivmoddi4+0x2c6>
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	f240 8087 	bls.w	800050a <__udivmoddi4+0x2c6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	443d      	add	r5, r7
 8000400:	1aeb      	subs	r3, r5, r3
 8000402:	fa1f f588 	uxth.w	r5, r8
 8000406:	fbb3 f0f2 	udiv	r0, r3, r2
 800040a:	fb02 3310 	mls	r3, r2, r0, r3
 800040e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000412:	fb00 f30c 	mul.w	r3, r0, ip
 8000416:	42ab      	cmp	r3, r5
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1e6>
 800041a:	19ed      	adds	r5, r5, r7
 800041c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000420:	d26f      	bcs.n	8000502 <__udivmoddi4+0x2be>
 8000422:	42ab      	cmp	r3, r5
 8000424:	d96d      	bls.n	8000502 <__udivmoddi4+0x2be>
 8000426:	3802      	subs	r0, #2
 8000428:	443d      	add	r5, r7
 800042a:	1aeb      	subs	r3, r5, r3
 800042c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000430:	e78f      	b.n	8000352 <__udivmoddi4+0x10e>
 8000432:	f1c1 0720 	rsb	r7, r1, #32
 8000436:	fa22 f807 	lsr.w	r8, r2, r7
 800043a:	408b      	lsls	r3, r1
 800043c:	fa05 f401 	lsl.w	r4, r5, r1
 8000440:	ea48 0303 	orr.w	r3, r8, r3
 8000444:	fa20 fe07 	lsr.w	lr, r0, r7
 8000448:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800044c:	40fd      	lsrs	r5, r7
 800044e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000452:	fbb5 f9fc 	udiv	r9, r5, ip
 8000456:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800045a:	fb0c 5519 	mls	r5, ip, r9, r5
 800045e:	fa1f f883 	uxth.w	r8, r3
 8000462:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000466:	fb09 f408 	mul.w	r4, r9, r8
 800046a:	42ac      	cmp	r4, r5
 800046c:	fa02 f201 	lsl.w	r2, r2, r1
 8000470:	fa00 fa01 	lsl.w	sl, r0, r1
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x244>
 8000476:	18ed      	adds	r5, r5, r3
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d243      	bcs.n	8000506 <__udivmoddi4+0x2c2>
 800047e:	42ac      	cmp	r4, r5
 8000480:	d941      	bls.n	8000506 <__udivmoddi4+0x2c2>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	441d      	add	r5, r3
 8000488:	1b2d      	subs	r5, r5, r4
 800048a:	fa1f fe8e 	uxth.w	lr, lr
 800048e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000492:	fb0c 5510 	mls	r5, ip, r0, r5
 8000496:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x26e>
 80004a2:	18e4      	adds	r4, r4, r3
 80004a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a8:	d229      	bcs.n	80004fe <__udivmoddi4+0x2ba>
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d927      	bls.n	80004fe <__udivmoddi4+0x2ba>
 80004ae:	3802      	subs	r0, #2
 80004b0:	441c      	add	r4, r3
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba4 0408 	sub.w	r4, r4, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454c      	cmp	r4, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	464d      	mov	r5, r9
 80004c4:	d315      	bcc.n	80004f2 <__udivmoddi4+0x2ae>
 80004c6:	d012      	beq.n	80004ee <__udivmoddi4+0x2aa>
 80004c8:	b156      	cbz	r6, 80004e0 <__udivmoddi4+0x29c>
 80004ca:	ebba 030e 	subs.w	r3, sl, lr
 80004ce:	eb64 0405 	sbc.w	r4, r4, r5
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431f      	orrs	r7, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	6037      	str	r7, [r6, #0]
 80004de:	6074      	str	r4, [r6, #4]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6f8      	b.n	80002dc <__udivmoddi4+0x98>
 80004ea:	4690      	mov	r8, r2
 80004ec:	e6e0      	b.n	80002b0 <__udivmoddi4+0x6c>
 80004ee:	45c2      	cmp	sl, r8
 80004f0:	d2ea      	bcs.n	80004c8 <__udivmoddi4+0x284>
 80004f2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f6:	eb69 0503 	sbc.w	r5, r9, r3
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7e4      	b.n	80004c8 <__udivmoddi4+0x284>
 80004fe:	4628      	mov	r0, r5
 8000500:	e7d7      	b.n	80004b2 <__udivmoddi4+0x26e>
 8000502:	4640      	mov	r0, r8
 8000504:	e791      	b.n	800042a <__udivmoddi4+0x1e6>
 8000506:	4681      	mov	r9, r0
 8000508:	e7be      	b.n	8000488 <__udivmoddi4+0x244>
 800050a:	4601      	mov	r1, r0
 800050c:	e778      	b.n	8000400 <__udivmoddi4+0x1bc>
 800050e:	3802      	subs	r0, #2
 8000510:	443c      	add	r4, r7
 8000512:	e745      	b.n	80003a0 <__udivmoddi4+0x15c>
 8000514:	4608      	mov	r0, r1
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xe6>
 8000518:	f1a8 0802 	sub.w	r8, r8, #2
 800051c:	443d      	add	r5, r7
 800051e:	e72b      	b.n	8000378 <__udivmoddi4+0x134>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <HAL_UART_TxCpltCallback>:
#include "callback.h"

extern volatile enum DATA_TRANSFER uart_transmission,qspi_transmission,qspi_reception,qspi_cmd_transmission;
extern volatile enum STATUS_MATCH qspi_status_match;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

	uart_transmission	=	END;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_UART_TxCpltCallback+0x1c>)
 800052e:	220a      	movs	r2, #10
 8000530:	701a      	strb	r2, [r3, #0]

}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200000f4 	.word	0x200000f4

08000544 <HAL_QSPI_RxCpltCallback>:

void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	qspi_reception	=	END;
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <HAL_QSPI_RxCpltCallback+0x1c>)
 800054e:	220a      	movs	r2, #10
 8000550:	701a      	strb	r2, [r3, #0]



}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	200000f6 	.word	0x200000f6

08000564 <HAL_QSPI_ErrorCallback>:
void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_Delay(300);
 800056c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000570:	f001 fac8 	bl	8001b04 <HAL_Delay>
		HAL_GPIO_TogglePin(USR_LED_GPIO_Port,USR_LED_Pin);
 8000574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000578:	4801      	ldr	r0, [pc, #4]	; (8000580 <HAL_QSPI_ErrorCallback+0x1c>)
 800057a:	f002 f93c 	bl	80027f6 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800057e:	e7f5      	b.n	800056c <HAL_QSPI_ErrorCallback+0x8>
 8000580:	40020400 	.word	0x40020400

08000584 <HAL_QSPI_TxCpltCallback>:
	}

}
void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	qspi_transmission	=	END;
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <HAL_QSPI_TxCpltCallback+0x1c>)
 800058e:	220a      	movs	r2, #10
 8000590:	701a      	strb	r2, [r3, #0]

}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	200000f7 	.word	0x200000f7

080005a4 <HAL_QSPI_CmdCpltCallback>:
void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	qspi_cmd_transmission	=	END;
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <HAL_QSPI_CmdCpltCallback+0x1c>)
 80005ae:	220a      	movs	r2, #10
 80005b0:	701a      	strb	r2, [r3, #0]


}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200000f5 	.word	0x200000f5

080005c4 <HAL_QSPI_StatusMatchCallback>:



void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  qspi_status_match =MATCH;
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <HAL_QSPI_StatusMatchCallback+0x1c>)
 80005ce:	2202      	movs	r2, #2
 80005d0:	701a      	strb	r2, [r3, #0]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000028 	.word	0x20000028

080005e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4a10      	ldr	r2, [pc, #64]	; (8000630 <MX_DMA_Init+0x4c>)
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_DMA_Init+0x4c>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <MX_DMA_Init+0x4c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	203a      	movs	r0, #58	; 0x3a
 800060c:	f001 fb75 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000610:	203a      	movs	r0, #58	; 0x3a
 8000612:	f001 fb8e 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2046      	movs	r0, #70	; 0x46
 800061c:	f001 fb6d 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000620:	2046      	movs	r0, #70	; 0x46
 8000622:	f001 fb86 	bl	8001d32 <HAL_NVIC_EnableIRQ>

}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800

08000634 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	4a2e      	ldr	r2, [pc, #184]	; (8000708 <MX_GPIO_Init+0xd4>)
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <MX_GPIO_Init+0xd4>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f043 0310 	orr.w	r3, r3, #16
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <MX_GPIO_Init+0xd4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0310 	and.w	r3, r3, #16
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	4a27      	ldr	r2, [pc, #156]	; (8000708 <MX_GPIO_Init+0xd4>)
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <MX_GPIO_Init+0xd4>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <MX_GPIO_Init+0xd4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0302 	and.w	r3, r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	4a20      	ldr	r2, [pc, #128]	; (8000708 <MX_GPIO_Init+0xd4>)
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <MX_GPIO_Init+0xd4>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_GPIO_Init+0xd4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4a19      	ldr	r2, [pc, #100]	; (8000708 <MX_GPIO_Init+0xd4>)
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_GPIO_Init+0xd4>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_GPIO_Init+0xd4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_GPIO_Init+0xd4>)
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_GPIO_Init+0xd4>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	f043 0308 	orr.w	r3, r3, #8
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_GPIO_Init+0xd4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_GPIO_Init+0xd8>)
 80006de:	f002 f871 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80006e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_GPIO_Init+0xd8>)
 80006fc:	f001 fed0 	bl	80024a0 <HAL_GPIO_Init>

}
 8000700:	bf00      	nop
 8000702:	3728      	adds	r7, #40	; 0x28
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40020400 	.word	0x40020400

08000710 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000716:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000718:	f001 f982 	bl	8001a20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800071c:	f000 f906 	bl	800092c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000720:	f7ff ff88 	bl	8000634 <MX_GPIO_Init>
	MX_DMA_Init();
 8000724:	f7ff ff5e 	bl	80005e4 <MX_DMA_Init>
	MX_QUADSPI_Init();
 8000728:	f000 f97a 	bl	8000a20 <MX_QUADSPI_Init>
	MX_USART1_UART_Init();
 800072c:	f000 fafc 	bl	8000d28 <MX_USART1_UART_Init>

	SW25Q128JV_Handle OW25Q128JV_Hdle;
	EW25Q128JVErrorCode error_w25q128jv_write_enable,error_w25q128jv_read_stat_reg,error_w25q128jv_write_stat_reg,error_w25q128jv_qspi_enable;
	EW25Q128JVErrorCode error_w25q128jv_fast_read_quad_io,error_w25q128jv_quad_input_page_program,error_w25q128jv_wait_until_busy_reset;
	EW25Q128JVErrorCode err_w25q128jv_erase,err_w25q128jv_read_unique_id,errw25q128jv_read_jedec_id;
	OW25Q128JV_Hdle.qspi_command_send	=	wrap_qspi_command_send;
 8000730:	4b74      	ldr	r3, [pc, #464]	; (8000904 <main+0x1f4>)
 8000732:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	OW25Q128JV_Hdle.qspi_receive	=wrap_qspi_receive;
 8000736:	4b74      	ldr	r3, [pc, #464]	; (8000908 <main+0x1f8>)
 8000738:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	OW25Q128JV_Hdle.qspi_transmit=wrap_qspi_transmit;
 800073c:	4b73      	ldr	r3, [pc, #460]	; (800090c <main+0x1fc>)
 800073e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	OW25Q128JV_Hdle.qspi_auto_polling=wrap_qspi_auto_polling;
 8000742:	4b73      	ldr	r3, [pc, #460]	; (8000910 <main+0x200>)
 8000744:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint8_t status_register_1;
	uint8_t status_register_2;
	uint8_t readbuff[256]={0},txbuf[260];
 8000748:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800074c:	4618      	mov	r0, r3
 800074e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000752:	461a      	mov	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f004 fbfe 	bl	8004f56 <memset>
	sprintf(txbuf,"0123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121");
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	4a6d      	ldr	r2, [pc, #436]	; (8000914 <main+0x204>)
 8000760:	4618      	mov	r0, r3
 8000762:	4611      	mov	r1, r2
 8000764:	f240 1301 	movw	r3, #257	; 0x101
 8000768:	461a      	mov	r2, r3
 800076a:	f004 fbe9 	bl	8004f40 <memcpy>
	uint64_t uid=0;
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	f04f 0400 	mov.w	r4, #0
 8000776:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800077a:	e882 0018 	stmia.w	r2, {r3, r4}
	SJEDEC_ID jedec;



	err_w25q128jv_erase=w25q128jv_erase_4kb(&OW25Q128JV_Hdle,0);
 800077e:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fb7d 	bl	8000e84 <w25q128jv_erase_4kb>
 800078a:	4603      	mov	r3, r0
 800078c:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
		error_w25q128jv_fast_read_quad_io=w25q128jv_fast_read_quad_io(&OW25Q128JV_Hdle,0,readbuff,256);
 8000790:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8000794:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8000798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079c:	2100      	movs	r1, #0
 800079e:	f000 fcc6 	bl	800112e <w25q128jv_fast_read_quad_io>
 80007a2:	4603      	mov	r3, r0
 80007a4:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
		sprintf(output,"\r\n fast read quad io after erase \r\n");
 80007a8:	4b5b      	ldr	r3, [pc, #364]	; (8000918 <main+0x208>)
 80007aa:	4a5c      	ldr	r2, [pc, #368]	; (800091c <main+0x20c>)
 80007ac:	4614      	mov	r4, r2
 80007ae:	469e      	mov	lr, r3
 80007b0:	f104 0c20 	add.w	ip, r4, #32
 80007b4:	4675      	mov	r5, lr
 80007b6:	4626      	mov	r6, r4
 80007b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ba:	6028      	str	r0, [r5, #0]
 80007bc:	6069      	str	r1, [r5, #4]
 80007be:	60aa      	str	r2, [r5, #8]
 80007c0:	60eb      	str	r3, [r5, #12]
 80007c2:	3410      	adds	r4, #16
 80007c4:	f10e 0e10 	add.w	lr, lr, #16
 80007c8:	4564      	cmp	r4, ip
 80007ca:	d1f3      	bne.n	80007b4 <main+0xa4>
 80007cc:	4673      	mov	r3, lr
 80007ce:	4622      	mov	r2, r4
 80007d0:	6810      	ldr	r0, [r2, #0]
 80007d2:	6018      	str	r0, [r3, #0]
			uart_transmission=START;
 80007d4:	4b52      	ldr	r3, [pc, #328]	; (8000920 <main+0x210>)
 80007d6:	220b      	movs	r2, #11
 80007d8:	701a      	strb	r2, [r3, #0]
			if(HAL_UART_Transmit_IT(&huart1,output,strlen(output))	!=	HAL_OK)
 80007da:	484f      	ldr	r0, [pc, #316]	; (8000918 <main+0x208>)
 80007dc:	f7ff fd12 	bl	8000204 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	494c      	ldr	r1, [pc, #304]	; (8000918 <main+0x208>)
 80007e8:	484e      	ldr	r0, [pc, #312]	; (8000924 <main+0x214>)
 80007ea:	f003 fda4 	bl	8004336 <HAL_UART_Transmit_IT>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <main+0xea>
			{
				Error_Handler();
 80007f4:	f000 f90c 	bl	8000a10 <Error_Handler>
 80007f8:	e005      	b.n	8000806 <main+0xf6>
			}
			else
			{
				while(uart_transmission!=END);
 80007fa:	bf00      	nop
 80007fc:	4b48      	ldr	r3, [pc, #288]	; (8000920 <main+0x210>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d1fa      	bne.n	80007fc <main+0xec>
			}


				uart_transmission=START;
 8000806:	4b46      	ldr	r3, [pc, #280]	; (8000920 <main+0x210>)
 8000808:	220b      	movs	r2, #11
 800080a:	701a      	strb	r2, [r3, #0]
				if(HAL_UART_Transmit_IT(&huart1,readbuff,256)	!=	HAL_OK)
 800080c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000814:	4619      	mov	r1, r3
 8000816:	4843      	ldr	r0, [pc, #268]	; (8000924 <main+0x214>)
 8000818:	f003 fd8d 	bl	8004336 <HAL_UART_Transmit_IT>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <main+0x118>
				{
					Error_Handler();
 8000822:	f000 f8f5 	bl	8000a10 <Error_Handler>
 8000826:	e005      	b.n	8000834 <main+0x124>
				}
				else
				{
					while(uart_transmission!=END);
 8000828:	bf00      	nop
 800082a:	4b3d      	ldr	r3, [pc, #244]	; (8000920 <main+0x210>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b0a      	cmp	r3, #10
 8000832:	d1fa      	bne.n	800082a <main+0x11a>
				}
				error_w25q128jv_quad_input_page_program=w25q128jv_quad_input_page_program(&OW25Q128JV_Hdle,0,txbuf,256);
 8000834:	f107 0208 	add.w	r2, r7, #8
 8000838:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	2100      	movs	r1, #0
 8000842:	f000 fce3 	bl	800120c <w25q128jv_quad_input_page_program>
 8000846:	4603      	mov	r3, r0
 8000848:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a

				error_w25q128jv_fast_read_quad_io=w25q128jv_fast_read_quad_io(&OW25Q128JV_Hdle,0,readbuff,256);
 800084c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8000850:	f507 7003 	add.w	r0, r7, #524	; 0x20c
 8000854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000858:	2100      	movs	r1, #0
 800085a:	f000 fc68 	bl	800112e <w25q128jv_fast_read_quad_io>
 800085e:	4603      	mov	r3, r0
 8000860:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
					sprintf(output,"\r\n fast read quad io after erase \r\n");
 8000864:	4b2c      	ldr	r3, [pc, #176]	; (8000918 <main+0x208>)
 8000866:	4a2d      	ldr	r2, [pc, #180]	; (800091c <main+0x20c>)
 8000868:	4614      	mov	r4, r2
 800086a:	469e      	mov	lr, r3
 800086c:	f104 0c20 	add.w	ip, r4, #32
 8000870:	4675      	mov	r5, lr
 8000872:	4626      	mov	r6, r4
 8000874:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000876:	6028      	str	r0, [r5, #0]
 8000878:	6069      	str	r1, [r5, #4]
 800087a:	60aa      	str	r2, [r5, #8]
 800087c:	60eb      	str	r3, [r5, #12]
 800087e:	3410      	adds	r4, #16
 8000880:	f10e 0e10 	add.w	lr, lr, #16
 8000884:	4564      	cmp	r4, ip
 8000886:	d1f3      	bne.n	8000870 <main+0x160>
 8000888:	4673      	mov	r3, lr
 800088a:	4622      	mov	r2, r4
 800088c:	6810      	ldr	r0, [r2, #0]
 800088e:	6018      	str	r0, [r3, #0]
						uart_transmission=START;
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <main+0x210>)
 8000892:	220b      	movs	r2, #11
 8000894:	701a      	strb	r2, [r3, #0]
						if(HAL_UART_Transmit_IT(&huart1,output,strlen(output))	!=	HAL_OK)
 8000896:	4820      	ldr	r0, [pc, #128]	; (8000918 <main+0x208>)
 8000898:	f7ff fcb4 	bl	8000204 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	b29b      	uxth	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	491d      	ldr	r1, [pc, #116]	; (8000918 <main+0x208>)
 80008a4:	481f      	ldr	r0, [pc, #124]	; (8000924 <main+0x214>)
 80008a6:	f003 fd46 	bl	8004336 <HAL_UART_Transmit_IT>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <main+0x1a6>
						{
							Error_Handler();
 80008b0:	f000 f8ae 	bl	8000a10 <Error_Handler>
 80008b4:	e005      	b.n	80008c2 <main+0x1b2>
						}
						else
						{
							while(uart_transmission!=END);
 80008b6:	bf00      	nop
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <main+0x210>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b0a      	cmp	r3, #10
 80008c0:	d1fa      	bne.n	80008b8 <main+0x1a8>
						}


							uart_transmission=START;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <main+0x210>)
 80008c4:	220b      	movs	r2, #11
 80008c6:	701a      	strb	r2, [r3, #0]
							if(HAL_UART_Transmit_IT(&huart1,readbuff,256)	!=	HAL_OK)
 80008c8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80008cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d0:	4619      	mov	r1, r3
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <main+0x214>)
 80008d4:	f003 fd2f 	bl	8004336 <HAL_UART_Transmit_IT>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <main+0x1d4>
							{
								Error_Handler();
 80008de:	f000 f897 	bl	8000a10 <Error_Handler>
 80008e2:	e005      	b.n	80008f0 <main+0x1e0>
							}
							else
							{
								while(uart_transmission!=END);
 80008e4:	bf00      	nop
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <main+0x210>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b0a      	cmp	r3, #10
 80008ee:	d1fa      	bne.n	80008e6 <main+0x1d6>
							}

	while (1)
	{

		HAL_Delay(1000);
 80008f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f4:	f001 f906 	bl	8001b04 <HAL_Delay>
		HAL_GPIO_TogglePin(USR_LED_GPIO_Port,USR_LED_Pin);
 80008f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <main+0x218>)
 80008fe:	f001 ff7a 	bl	80027f6 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000902:	e7f5      	b.n	80008f0 <main+0x1e0>
 8000904:	0800147d 	.word	0x0800147d
 8000908:	080016d9 	.word	0x080016d9
 800090c:	08001725 	.word	0x08001725
 8000910:	08001771 	.word	0x08001771
 8000914:	08004f80 	.word	0x08004f80
 8000918:	2000002c 	.word	0x2000002c
 800091c:	08005084 	.word	0x08005084
 8000920:	200000f4 	.word	0x200000f4
 8000924:	20000204 	.word	0x20000204
 8000928:	40020400 	.word	0x40020400

0800092c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b094      	sub	sp, #80	; 0x50
 8000930:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2234      	movs	r2, #52	; 0x34
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f004 fb0b 	bl	8004f56 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	4a2c      	ldr	r2, [pc, #176]	; (8000a08 <SystemClock_Config+0xdc>)
 8000956:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <SystemClock_Config+0xdc>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <SystemClock_Config+0xdc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096c:	2300      	movs	r3, #0
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <SystemClock_Config+0xe0>)
 8000972:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <SystemClock_Config+0xe0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <SystemClock_Config+0xe0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000988:	2302      	movs	r3, #2
 800098a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000990:	2310      	movs	r3, #16
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 800099c:	2308      	movs	r3, #8
 800099e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80009a0:	23b4      	movs	r3, #180	; 0xb4
 80009a2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 fa17 	bl	8003de8 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80009c0:	f000 f826 	bl	8000a10 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009c4:	f001 ff32 	bl	800282c <HAL_PWREx_EnableOverDrive>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80009ce:	f000 f81f 	bl	8000a10 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	230f      	movs	r3, #15
 80009d4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2302      	movs	r3, #2
 80009d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	2105      	movs	r1, #5
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 ff8d 	bl	8003910 <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 80009fc:	f000 f808 	bl	8000a10 <Error_Handler>
	}
}
 8000a00:	bf00      	nop
 8000a02:	3750      	adds	r7, #80	; 0x50
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40007000 	.word	0x40007000

08000a10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <MX_QUADSPI_Init>:
QSPI_HandleTypeDef hqspi;
DMA_HandleTypeDef hdma_quadspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a26:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <MX_QUADSPI_Init+0x54>)
 8000a28:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a3e:	2217      	movs	r2, #23
 8000a40:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_QUADSPI_Init+0x50>)
 8000a5c:	f001 ff36 	bl	80028cc <HAL_QSPI_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000a66:	f7ff ffd3 	bl	8000a10 <Error_Handler>
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000158 	.word	0x20000158
 8000a74:	a0001000 	.word	0xa0001000

08000a78 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a53      	ldr	r2, [pc, #332]	; (8000be4 <HAL_QSPI_MspInit+0x16c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	f040 80a0 	bne.w	8000bdc <HAL_QSPI_MspInit+0x164>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
 8000aa0:	4a51      	ldr	r2, [pc, #324]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000aa2:	4b51      	ldr	r3, [pc, #324]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	6393      	str	r3, [r2, #56]	; 0x38
 8000aac:	4b4e      	ldr	r3, [pc, #312]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	4a4a      	ldr	r2, [pc, #296]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000abe:	4b4a      	ldr	r3, [pc, #296]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f043 0310 	orr.w	r3, r3, #16
 8000ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac8:	4b47      	ldr	r3, [pc, #284]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	4a43      	ldr	r2, [pc, #268]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000ada:	4b43      	ldr	r3, [pc, #268]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae4:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4a3c      	ldr	r2, [pc, #240]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000af6:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f043 0308 	orr.w	r3, r3, #8
 8000afe:	6313      	str	r3, [r2, #48]	; 0x30
 8000b00:	4b39      	ldr	r3, [pc, #228]	; (8000be8 <HAL_QSPI_MspInit+0x170>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	f003 0308 	and.w	r3, r3, #8
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    PD3     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b0c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8000b1e:	230a      	movs	r3, #10
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4830      	ldr	r0, [pc, #192]	; (8000bec <HAL_QSPI_MspInit+0x174>)
 8000b2a:	f001 fcb9 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000b40:	2309      	movs	r3, #9
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4829      	ldr	r0, [pc, #164]	; (8000bf0 <HAL_QSPI_MspInit+0x178>)
 8000b4c:	f001 fca8 	bl	80024a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b50:	2308      	movs	r3, #8
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8000b60:	2309      	movs	r3, #9
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4822      	ldr	r0, [pc, #136]	; (8000bf4 <HAL_QSPI_MspInit+0x17c>)
 8000b6c:	f001 fc98 	bl	80024a0 <HAL_GPIO_Init>

    /* QUADSPI DMA Init */
    /* QUADSPI Init */
    hdma_quadspi.Instance = DMA2_Stream7;
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000b72:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_QSPI_MspInit+0x184>)
 8000b74:	601a      	str	r2, [r3, #0]
    hdma_quadspi.Init.Channel = DMA_CHANNEL_3;
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000b78:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b7c:	605a      	str	r2, [r3, #4]
    hdma_quadspi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
    hdma_quadspi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
    hdma_quadspi.Init.MemInc = DMA_MINC_ENABLE;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b90:	611a      	str	r2, [r3, #16]
    hdma_quadspi.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	615a      	str	r2, [r3, #20]
    hdma_quadspi.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
    hdma_quadspi.Init.Mode = DMA_NORMAL;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	61da      	str	r2, [r3, #28]
    hdma_quadspi.Init.Priority = DMA_PRIORITY_LOW;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	621a      	str	r2, [r3, #32]
    hdma_quadspi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_quadspi) != HAL_OK)
 8000bb0:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000bb2:	f001 f8d9 	bl	8001d68 <HAL_DMA_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_QSPI_MspInit+0x148>
    {
      Error_Handler();
 8000bbc:	f7ff ff28 	bl	8000a10 <Error_Handler>
    }

    __HAL_LINKDMA(qspiHandle,hdma,hdma_quadspi);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000bc4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <HAL_QSPI_MspInit+0x180>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6393      	str	r3, [r2, #56]	; 0x38

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	205c      	movs	r0, #92	; 0x5c
 8000bd2:	f001 f892 	bl	8001cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8000bd6:	205c      	movs	r0, #92	; 0x5c
 8000bd8:	f001 f8ab 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3730      	adds	r7, #48	; 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	a0001000 	.word	0xa0001000
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020c00 	.word	0x40020c00
 8000bf8:	200000f8 	.word	0x200000f8
 8000bfc:	400264b8 	.word	0x400264b8

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 ff0e 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <USART1_IRQHandler+0x10>)
 8000cb2:	f003 fb85 	bl	80043c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000204 	.word	0x20000204

08000cc0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <DMA2_Stream2_IRQHandler+0x10>)
 8000cc6:	f001 f977 	bl	8001fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001a4 	.word	0x200001a4

08000cd4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_quadspi);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA2_Stream7_IRQHandler+0x10>)
 8000cda:	f001 f96d 	bl	8001fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000f8 	.word	0x200000f8

08000ce8 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <QUADSPI_IRQHandler+0x10>)
 8000cee:	f001 fe69 	bl	80029c4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000158 	.word	0x20000158

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <SystemInit+0x28>)
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <SystemInit+0x28>)
 8000d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SystemInit+0x28>)
 8000d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d16:	609a      	str	r2, [r3, #8]
#endif
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_USART1_UART_Init+0x50>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d60:	f003 fa9c 	bl	800429c <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d6a:	f7ff fe51 	bl	8000a10 <Error_Handler>
  }

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000204 	.word	0x20000204
 8000d78:	40011000 	.word	0x40011000

08000d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a35      	ldr	r2, [pc, #212]	; (8000e70 <HAL_UART_MspInit+0xf4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d163      	bne.n	8000e66 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4a34      	ldr	r2, [pc, #208]	; (8000e74 <HAL_UART_MspInit+0xf8>)
 8000da4:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <HAL_UART_MspInit+0xf8>)
 8000da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da8:	f043 0310 	orr.w	r3, r3, #16
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <HAL_UART_MspInit+0xf8>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4a2d      	ldr	r2, [pc, #180]	; (8000e74 <HAL_UART_MspInit+0xf8>)
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <HAL_UART_MspInit+0xf8>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <HAL_UART_MspInit+0xf8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = M_TTL_TX1_Pin|M_TTL_RX1_Pin;
 8000dd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de8:	2307      	movs	r3, #7
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4821      	ldr	r0, [pc, #132]	; (8000e78 <HAL_UART_MspInit+0xfc>)
 8000df4:	f001 fb54 	bl	80024a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000df8:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000dfa:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <HAL_UART_MspInit+0x104>)
 8000dfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e04:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e18:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e3a:	4810      	ldr	r0, [pc, #64]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e3c:	f000 ff94 	bl	8001d68 <HAL_DMA_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000e46:	f7ff fde3 	bl	8000a10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_UART_MspInit+0x100>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2025      	movs	r0, #37	; 0x25
 8000e5c:	f000 ff4d 	bl	8001cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e60:	2025      	movs	r0, #37	; 0x25
 8000e62:	f000 ff66 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	; 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40011000 	.word	0x40011000
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	200001a4 	.word	0x200001a4
 8000e80:	40026440 	.word	0x40026440

08000e84 <w25q128jv_erase_4kb>:

	return w25q128jv_error_cnvrt(err_code);

}
EW25Q128JVErrorCode w25q128jv_erase_4kb(SW25Q128JV_Handle *pHdle,uint32_t blk_address)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	EW25Q128JVErrorCode err_code = ERR_W25Q128JV_NO_ERROR;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	81fb      	strh	r3, [r7, #14]
	err_code	=	w25q128jv_erase(pHdle,W25Q128JV_INS_SECT_ERASE_4KB,blk_address);
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	2120      	movs	r1, #32
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 f80c 	bl	8000eb4 <w25q128jv_erase>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	81fb      	strh	r3, [r7, #14]

	return w25q128jv_error_cnvrt(err_code);
 8000ea0:	89fb      	ldrh	r3, [r7, #14]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fa74 	bl	8001390 <w25q128jv_error_cnvrt>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <w25q128jv_erase>:
	return w25q128jv_error_cnvrt(err_code);
}


EW25Q128JVErrorCode w25q128jv_erase(SW25Q128JV_Handle *pHdle,uint8_t cmd,uint32_t blk_address)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b096      	sub	sp, #88	; 0x58
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	72fb      	strb	r3, [r7, #11]
	EW25Q128JVErrorCode err_code = ERR_W25Q128JV_NO_ERROR;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	TS_QSPI_CommandTypeDef sCommand;

	uint32_t timeout,interval;//Crash Protection Timeout

	err_code	=w25q128jv_wait_until_busy_reset(pHdle,0XFFFF);//Polling intervel is 0xffff*clock frequency=
 8000ec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f000 fa15 	bl	80012fc <w25q128jv_wait_until_busy_reset>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	if(err_code ==	ERR_W25Q128JV_NO_ERROR)
 8000ed8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d155      	bne.n	8000f8c <w25q128jv_erase+0xd8>
	{
		err_code	=	w25q128jv_write_enable(pHdle);
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f000 f881 	bl	8000fe8 <w25q128jv_write_enable>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		if(err_code ==	ERR_W25Q128JV_NO_ERROR)
 8000eec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d14b      	bne.n	8000f8c <w25q128jv_erase+0xd8>
		{
			sCommand.AddressSize       = TS_QSPI_ADDRESS_24_BITS;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	623b      	str	r3, [r7, #32]
			sCommand.AlternateByteMode = TS_QSPI_ALTERNATE_BYTES_NONE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
			sCommand.AlternateBytesSize=TS_QSPI_ALTERNATE_BYTES_8_BITS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
			sCommand.AddressMode = TS_QSPI_ADDRESS_1_LINE;
 8000f00:	2301      	movs	r3, #1
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
			sCommand.DataMode    = TS_QSPI_DATA_NONE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63bb      	str	r3, [r7, #56]	; 0x38
			sCommand.DummyCycles = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
			sCommand.NbData=0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
			sCommand.Instruction = (uint32_t)cmd;
 8000f10:	7afb      	ldrb	r3, [r7, #11]
 8000f12:	617b      	str	r3, [r7, #20]
			sCommand.InstructionMode   = TS_QSPI_INSTRUCTION_1_LINE;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62fb      	str	r3, [r7, #44]	; 0x2c
			sCommand.DdrMode           = TS_QSPI_DDR_MODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
			sCommand.DdrHoldHalfCycle  = TS_QSPI_DDR_HHC_ANALOG_DELAY;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	647b      	str	r3, [r7, #68]	; 0x44
			sCommand.SIOOMode          = TS_QSPI_SIOO_INST_EVERY_CMD;
 8000f20:	2300      	movs	r3, #0
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
			sCommand.Address     = blk_address;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	61bb      	str	r3, [r7, #24]
			sCommand.AlternateBytes	=	0x00;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
			interval=0xffff;
 8000f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f30:	64fb      	str	r3, [r7, #76]	; 0x4c

			switch(cmd)
 8000f32:	7afb      	ldrb	r3, [r7, #11]
 8000f34:	2b60      	cmp	r3, #96	; 0x60
 8000f36:	d017      	beq.n	8000f68 <w25q128jv_erase+0xb4>
 8000f38:	2b60      	cmp	r3, #96	; 0x60
 8000f3a:	dc04      	bgt.n	8000f46 <w25q128jv_erase+0x92>
 8000f3c:	2b20      	cmp	r3, #32
 8000f3e:	d007      	beq.n	8000f50 <w25q128jv_erase+0x9c>
 8000f40:	2b52      	cmp	r3, #82	; 0x52
 8000f42:	d009      	beq.n	8000f58 <w25q128jv_erase+0xa4>
 8000f44:	e015      	b.n	8000f72 <w25q128jv_erase+0xbe>
 8000f46:	2bc7      	cmp	r3, #199	; 0xc7
 8000f48:	d00e      	beq.n	8000f68 <w25q128jv_erase+0xb4>
 8000f4a:	2bd8      	cmp	r3, #216	; 0xd8
 8000f4c:	d008      	beq.n	8000f60 <w25q128jv_erase+0xac>
 8000f4e:	e010      	b.n	8000f72 <w25q128jv_erase+0xbe>
			{
			case W25Q128JV_INS_SECT_ERASE_4KB:
				timeout=ERASE_4KB_MAX_TIME;
 8000f50:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000f54:	653b      	str	r3, [r7, #80]	; 0x50



				break;
 8000f56:	e00f      	b.n	8000f78 <w25q128jv_erase+0xc4>
			case W25Q128JV_INS_BLK_ERASE_32KB:
				timeout=ERASE_32KB_MAX_TIME;
 8000f58:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000f5c:	653b      	str	r3, [r7, #80]	; 0x50



				break;
 8000f5e:	e00b      	b.n	8000f78 <w25q128jv_erase+0xc4>
			case W25Q128JV_INS_BLK_ERASE_64KB:
				timeout=ERASE_64KB_MAX_TIME;
 8000f60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f64:	653b      	str	r3, [r7, #80]	; 0x50



				break;
 8000f66:	e007      	b.n	8000f78 <w25q128jv_erase+0xc4>
			case W25Q128JV_INS_CHIP_ERASE1	:
			case W25Q128JV_INS_CHIP_ERASE2	:
				timeout=ERASE_CHIP_MAX_TIME;
 8000f68:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <w25q128jv_erase+0xec>)
 8000f6a:	653b      	str	r3, [r7, #80]	; 0x50

				sCommand.AddressMode = TS_QSPI_ADDRESS_NONE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30

				break;
 8000f70:	e002      	b.n	8000f78 <w25q128jv_erase+0xc4>
			default		:return ERR_W25Q128JV_UNKNOWN_ERASE_CMD;
 8000f72:	f241 0309 	movw	r3, #4105	; 0x1009
 8000f76:	e00f      	b.n	8000f98 <w25q128jv_erase+0xe4>





			err_code	=	(*(pHdle->qspi_command_send))( &sCommand,timeout);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	f107 0214 	add.w	r2, r7, #20
 8000f80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000f82:	4610      	mov	r0, r2
 8000f84:	4798      	blx	r3
 8000f86:	4603      	mov	r3, r0
 8000f88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

		}
	}


	return w25q128jv_error_cnvrt(err_code);
 8000f8c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f9fd 	bl	8001390 <w25q128jv_error_cnvrt>
 8000f96:	4603      	mov	r3, r0

}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3758      	adds	r7, #88	; 0x58
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	00030d40 	.word	0x00030d40

08000fa4 <w25q128jv_qspi_enable>:
static inline EW25Q128JVErrorCode w25q128jv_qspi_enable(SW25Q128JV_Handle *pHdle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	EW25Q128JVErrorCode err_code = ERR_W25Q128JV_NO_ERROR;
 8000fac:	2300      	movs	r3, #0
 8000fae:	81fb      	strh	r3, [r7, #14]
	uint8_t stat_reg_2;
	err_code	=w25q128jv_wait_until_busy_reset(pHdle,0XFFFF);//Polling intervel is 0xffff*clock frequency=
 8000fb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f9a1 	bl	80012fc <w25q128jv_wait_until_busy_reset>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	81fb      	strh	r3, [r7, #14]


	if(err_code ==	ERR_W25Q128JV_NO_ERROR)
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d108      	bne.n	8000fd6 <w25q128jv_qspi_enable+0x32>
	{
		err_code = w25q128jv_read_stat_reg(pHdle,STATUS_REG_2,&stat_reg_2);
 8000fc4:	f107 030d 	add.w	r3, r7, #13
 8000fc8:	461a      	mov	r2, r3
 8000fca:	2102      	movs	r1, #2
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f850 	bl	8001072 <w25q128jv_read_stat_reg>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	81fb      	strh	r3, [r7, #14]
			}
		}
	}


	return w25q128jv_error_cnvrt(err_code);
 8000fd6:	89fb      	ldrh	r3, [r7, #14]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f9d9 	bl	8001390 <w25q128jv_error_cnvrt>
 8000fde:	4603      	mov	r3, r0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <w25q128jv_write_enable>:
static inline EW25Q128JVErrorCode w25q128jv_write_enable(SW25Q128JV_Handle *pHdle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b092      	sub	sp, #72	; 0x48
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

	EW25Q128JVErrorCode err_code = ERR_W25Q128JV_NO_ERROR;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	TS_QSPI_CommandTypeDef sCommand;

	uint32_t timeout;//Crash Protection Timeout

	err_code	=w25q128jv_wait_until_busy_reset(pHdle,0XFFFF);//Polling intervel is 0xffff*clock frequency=
 8000ff6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f97e 	bl	80012fc <w25q128jv_wait_until_busy_reset>
 8001000:	4603      	mov	r3, r0
 8001002:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	if(err_code ==	ERR_W25Q128JV_NO_ERROR)
 8001006:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800100a:	2b00      	cmp	r3, #0
 800100c:	d127      	bne.n	800105e <w25q128jv_write_enable+0x76>
	{

		timeout=WR_STAT_REG_MAX_TIME;
 800100e:	230f      	movs	r3, #15
 8001010:	643b      	str	r3, [r7, #64]	; 0x40
		sCommand.AddressSize       = TS_QSPI_ADDRESS_24_BITS;
 8001012:	2302      	movs	r3, #2
 8001014:	617b      	str	r3, [r7, #20]
		sCommand.AlternateByteMode = TS_QSPI_ALTERNATE_BYTES_NONE;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.AlternateBytesSize=TS_QSPI_ALTERNATE_BYTES_8_BITS;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
		sCommand.Instruction = (uint32_t)W25Q128JV_INS_WRITE_ENABLE;
 800101e:	2306      	movs	r3, #6
 8001020:	60bb      	str	r3, [r7, #8]
		sCommand.AddressMode = TS_QSPI_ADDRESS_NONE;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.Address     = 0x0;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
		sCommand.DataMode    = TS_QSPI_DATA_NONE;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
		sCommand.DummyCycles = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
		sCommand.NbData=0;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.InstructionMode   = TS_QSPI_INSTRUCTION_1_LINE;
 8001036:	2301      	movs	r3, #1
 8001038:	623b      	str	r3, [r7, #32]
		sCommand.DdrMode           = TS_QSPI_DDR_MODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.DdrHoldHalfCycle  = TS_QSPI_DDR_HHC_ANALOG_DELAY;
 800103e:	2300      	movs	r3, #0
 8001040:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.SIOOMode          = TS_QSPI_SIOO_INST_EVERY_CMD;
 8001042:	2300      	movs	r3, #0
 8001044:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.AlternateBytes	=	0x00;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]


		err_code	=	(*(pHdle->qspi_command_send))( &sCommand,timeout);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	f107 0208 	add.w	r2, r7, #8
 8001052:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001054:	4610      	mov	r0, r2
 8001056:	4798      	blx	r3
 8001058:	4603      	mov	r3, r0
 800105a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	}


	return w25q128jv_error_cnvrt(err_code);
 800105e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f994 	bl	8001390 <w25q128jv_error_cnvrt>
 8001068:	4603      	mov	r3, r0


}
 800106a:	4618      	mov	r0, r3
 800106c:	3748      	adds	r7, #72	; 0x48
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <w25q128jv_read_stat_reg>:

	return w25q128jv_error_cnvrt(err_code);

}
static inline EW25Q128JVErrorCode w25q128jv_read_stat_reg(SW25Q128JV_Handle *pHdle,EW25Q128JVStatusRegister stat_reg,uint8_t *pRegVal)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b094      	sub	sp, #80	; 0x50
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	460b      	mov	r3, r1
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	72fb      	strb	r3, [r7, #11]

	EW25Q128JVErrorCode err_code = ERR_W25Q128JV_NO_ERROR;
 8001080:	2300      	movs	r3, #0
 8001082:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	TS_QSPI_CommandTypeDef sCommand;

	uint32_t timeout;//Crash Protection Timeout

	err_code	=w25q128jv_wait_until_busy_reset(pHdle,0XFFFF);//Polling intervel is 0xffff*clock frequency=
 8001086:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 f936 	bl	80012fc <w25q128jv_wait_until_busy_reset>
 8001090:	4603      	mov	r3, r0
 8001092:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	if(err_code ==	ERR_W25Q128JV_NO_ERROR)
 8001096:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800109a:	2b00      	cmp	r3, #0
 800109c:	d13d      	bne.n	800111a <w25q128jv_read_stat_reg+0xa8>
	{

		timeout=RD_STAT_REG_MAX_TIME;
 800109e:	230a      	movs	r3, #10
 80010a0:	64bb      	str	r3, [r7, #72]	; 0x48
		sCommand.AddressSize       = TS_QSPI_ADDRESS_24_BITS;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61fb      	str	r3, [r7, #28]
		sCommand.AlternateByteMode = TS_QSPI_ALTERNATE_BYTES_NONE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
		sCommand.AlternateBytesSize=TS_QSPI_ALTERNATE_BYTES_8_BITS;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
		sCommand.Instruction = (uint32_t)(stat_reg==STATUS_REG_1)?W25Q128JV_INS_READ_STATUS_REG_1:((stat_reg==STATUS_REG_2)?W25Q128JV_INS_READ_STATUS_REG_2:W25Q128JV_INS_READ_STATUS_REG_3);
 80010ae:	7afb      	ldrb	r3, [r7, #11]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d006      	beq.n	80010c2 <w25q128jv_read_stat_reg+0x50>
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d101      	bne.n	80010be <w25q128jv_read_stat_reg+0x4c>
 80010ba:	2335      	movs	r3, #53	; 0x35
 80010bc:	e002      	b.n	80010c4 <w25q128jv_read_stat_reg+0x52>
 80010be:	2315      	movs	r3, #21
 80010c0:	e000      	b.n	80010c4 <w25q128jv_read_stat_reg+0x52>
 80010c2:	2305      	movs	r3, #5
 80010c4:	613b      	str	r3, [r7, #16]
		sCommand.AddressMode = TS_QSPI_ADDRESS_NONE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sCommand.Address     = 0x0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
		sCommand.DataMode    = TS_QSPI_DATA_1_LINE;
 80010ce:	2301      	movs	r3, #1
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
		sCommand.DummyCycles = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
		sCommand.NbData=1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
		sCommand.InstructionMode   = TS_QSPI_INSTRUCTION_1_LINE;
 80010da:	2301      	movs	r3, #1
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
		sCommand.DdrMode           = TS_QSPI_DDR_MODE_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		sCommand.DdrHoldHalfCycle  = TS_QSPI_DDR_HHC_ANALOG_DELAY;
 80010e2:	2300      	movs	r3, #0
 80010e4:	643b      	str	r3, [r7, #64]	; 0x40
		sCommand.SIOOMode          = TS_QSPI_SIOO_INST_EVERY_CMD;
 80010e6:	2300      	movs	r3, #0
 80010e8:	647b      	str	r3, [r7, #68]	; 0x44
		sCommand.AlternateBytes	=	0x00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]


		err_code	=	(*(pHdle->qspi_command_send))( &sCommand,timeout);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f107 0210 	add.w	r2, r7, #16
 80010f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80010f8:	4610      	mov	r0, r2
 80010fa:	4798      	blx	r3
 80010fc:	4603      	mov	r3, r0
 80010fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

		if(err_code	==	ERR_W25Q128JV_NO_ERROR)
 8001102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001106:	2b00      	cmp	r3, #0
 8001108:	d107      	bne.n	800111a <w25q128jv_read_stat_reg+0xa8>
		{
			err_code	=(*(pHdle->qspi_receive))(pRegVal,timeout);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	4798      	blx	r3
 8001114:	4603      	mov	r3, r0
 8001116:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}
	}


	return w25q128jv_error_cnvrt(err_code);
 800111a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f936 	bl	8001390 <w25q128jv_error_cnvrt>
 8001124:	4603      	mov	r3, r0

}
 8001126:	4618      	mov	r0, r3
 8001128:	3750      	adds	r7, #80	; 0x50
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <w25q128jv_fast_read_quad_io>:


EW25Q128JVErrorCode w25q128jv_fast_read_quad_io(SW25Q128JV_Handle *pHdle,uint32_t RdAddress,uint8_t *pRdBuffer, uint32_t RdSize)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b094      	sub	sp, #80	; 0x50
 8001132:	af00      	add	r7, sp, #0
 8001134:	60f8      	str	r0, [r7, #12]
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	603b      	str	r3, [r7, #0]

	EW25Q128JVErrorCode err_code = ERR_W25Q128JV_NO_ERROR;
 800113c:	2300      	movs	r3, #0
 800113e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	TS_QSPI_CommandTypeDef sCommand;

	uint32_t timeout;//Crash Protection Timeout

	err_code	=w25q128jv_wait_until_busy_reset(pHdle,0XFFFF);//Polling intervel is 0xffff*clock frequency=
 8001142:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f000 f8d8 	bl	80012fc <w25q128jv_wait_until_busy_reset>
 800114c:	4603      	mov	r3, r0
 800114e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	if(err_code == ERR_W25Q128JV_NO_ERROR)
 8001152:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001156:	2b00      	cmp	r3, #0
 8001158:	d14e      	bne.n	80011f8 <w25q128jv_fast_read_quad_io+0xca>
	{

		err_code=w25q128jv_qspi_enable(pHdle);
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f7ff ff22 	bl	8000fa4 <w25q128jv_qspi_enable>
 8001160:	4603      	mov	r3, r0
 8001162:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		if(err_code	==	ERR_W25Q128JV_NO_ERROR)
 8001166:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800116a:	2b00      	cmp	r3, #0
 800116c:	d144      	bne.n	80011f8 <w25q128jv_fast_read_quad_io+0xca>
		{

			if(err_code == ERR_W25Q128JV_NO_ERROR)
 800116e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001172:	2b00      	cmp	r3, #0
 8001174:	d140      	bne.n	80011f8 <w25q128jv_fast_read_quad_io+0xca>
			{

				err_code	=w25q128jv_wait_until_busy_reset(pHdle,0XFFFF);//Polling intervel is 0xffff*clock frequency=
 8001176:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f000 f8be 	bl	80012fc <w25q128jv_wait_until_busy_reset>
 8001180:	4603      	mov	r3, r0
 8001182:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

				if(err_code ==	ERR_W25Q128JV_NO_ERROR)
 8001186:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800118a:	2b00      	cmp	r3, #0
 800118c:	d134      	bne.n	80011f8 <w25q128jv_fast_read_quad_io+0xca>
				{

					timeout=~0;
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
					sCommand.AddressSize       = TS_QSPI_ADDRESS_24_BITS;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
					sCommand.AlternateByteMode = TS_QSPI_ALTERNATE_BYTES_4_LINES;
 8001198:	2303      	movs	r3, #3
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
					sCommand.AlternateBytesSize=TS_QSPI_ALTERNATE_BYTES_8_BITS;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
					sCommand.Instruction = (uint32_t)W25Q128JV_INS_FAST_READ_QUAD_IO;
 80011a0:	23eb      	movs	r3, #235	; 0xeb
 80011a2:	613b      	str	r3, [r7, #16]
					sCommand.AddressMode = TS_QSPI_ADDRESS_4_LINES;
 80011a4:	2303      	movs	r3, #3
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					sCommand.Address     = RdAddress;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	617b      	str	r3, [r7, #20]
					sCommand.DataMode    = TS_QSPI_DATA_4_LINES;
 80011ac:	2303      	movs	r3, #3
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
					sCommand.DummyCycles = 4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
					sCommand.NbData=RdSize;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	63bb      	str	r3, [r7, #56]	; 0x38
					sCommand.InstructionMode   = TS_QSPI_INSTRUCTION_1_LINE;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
					sCommand.DdrMode           = TS_QSPI_DDR_MODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
					sCommand.DdrHoldHalfCycle  = TS_QSPI_DDR_HHC_ANALOG_DELAY;
 80011c0:	2300      	movs	r3, #0
 80011c2:	643b      	str	r3, [r7, #64]	; 0x40
					sCommand.SIOOMode          = TS_QSPI_SIOO_INST_EVERY_CMD;
 80011c4:	2300      	movs	r3, #0
 80011c6:	647b      	str	r3, [r7, #68]	; 0x44
					sCommand.AlternateBytes	=	0xF0;
 80011c8:	23f0      	movs	r3, #240	; 0xf0
 80011ca:	61bb      	str	r3, [r7, #24]


					err_code	=	(*(pHdle->qspi_command_send))( &sCommand,timeout);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f107 0210 	add.w	r2, r7, #16
 80011d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011d6:	4610      	mov	r0, r2
 80011d8:	4798      	blx	r3
 80011da:	4603      	mov	r3, r0
 80011dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

					if(err_code	==	ERR_W25Q128JV_NO_ERROR)
 80011e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d107      	bne.n	80011f8 <w25q128jv_fast_read_quad_io+0xca>
					{
						err_code	=(*(pHdle->qspi_receive))(pRdBuffer,timeout);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	4798      	blx	r3
 80011f2:	4603      	mov	r3, r0
 80011f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				}
			}
		}
	}

	return w25q128jv_error_cnvrt(err_code);
 80011f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f8c7 	bl	8001390 <w25q128jv_error_cnvrt>
 8001202:	4603      	mov	r3, r0

}
 8001204:	4618      	mov	r0, r3
 8001206:	3750      	adds	r7, #80	; 0x50
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <w25q128jv_quad_input_page_program>:
EW25Q128JVErrorCode w25q128jv_quad_input_page_program(SW25Q128JV_Handle *pHdle,uint32_t TdAddress,uint8_t *pTdBuffer, uint32_t TdSize)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	; 0x50
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
	EW25Q128JVErrorCode err_code = ERR_W25Q128JV_NO_ERROR;
 800121a:	2300      	movs	r3, #0
 800121c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	TS_QSPI_CommandTypeDef sCommand;

	uint32_t timeout;//Crash Protection Timeout

	err_code	=w25q128jv_wait_until_busy_reset(pHdle,0XFFFF);//Polling intervel is 0xffff*clock frequency=
 8001220:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f000 f869 	bl	80012fc <w25q128jv_wait_until_busy_reset>
 800122a:	4603      	mov	r3, r0
 800122c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	if(err_code == ERR_W25Q128JV_NO_ERROR)
 8001230:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001234:	2b00      	cmp	r3, #0
 8001236:	d157      	bne.n	80012e8 <w25q128jv_quad_input_page_program+0xdc>
	{

		err_code=w25q128jv_qspi_enable(pHdle);
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f7ff feb3 	bl	8000fa4 <w25q128jv_qspi_enable>
 800123e:	4603      	mov	r3, r0
 8001240:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		if(err_code	==	ERR_W25Q128JV_NO_ERROR)
 8001244:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001248:	2b00      	cmp	r3, #0
 800124a:	d14d      	bne.n	80012e8 <w25q128jv_quad_input_page_program+0xdc>
		{

			if(err_code == ERR_W25Q128JV_NO_ERROR)
 800124c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001250:	2b00      	cmp	r3, #0
 8001252:	d149      	bne.n	80012e8 <w25q128jv_quad_input_page_program+0xdc>
			{

				err_code	=w25q128jv_wait_until_busy_reset(pHdle,0XFFFF);//Polling intervel is 0xffff*clock frequency=
 8001254:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f000 f84f 	bl	80012fc <w25q128jv_wait_until_busy_reset>
 800125e:	4603      	mov	r3, r0
 8001260:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				if(err_code == ERR_W25Q128JV_NO_ERROR)
 8001264:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001268:	2b00      	cmp	r3, #0
 800126a:	d13d      	bne.n	80012e8 <w25q128jv_quad_input_page_program+0xdc>
				{

					err_code	=	w25q128jv_write_enable(pHdle);
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff febb 	bl	8000fe8 <w25q128jv_write_enable>
 8001272:	4603      	mov	r3, r0
 8001274:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					if(err_code	==	ERR_W25Q128JV_NO_ERROR)
 8001278:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800127c:	2b00      	cmp	r3, #0
 800127e:	d133      	bne.n	80012e8 <w25q128jv_quad_input_page_program+0xdc>
					{

						timeout=PGM_MAX_TIME;
 8001280:	2303      	movs	r3, #3
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
						sCommand.AddressSize       = TS_QSPI_ADDRESS_24_BITS;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]
						sCommand.AlternateByteMode = TS_QSPI_ALTERNATE_BYTES_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
						sCommand.AlternateBytesSize=TS_QSPI_ALTERNATE_BYTES_8_BITS;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
						sCommand.Instruction = (uint32_t)W25Q128JV_INS_QUAD_INPUT_PAGE_PGM;
 8001290:	2332      	movs	r3, #50	; 0x32
 8001292:	613b      	str	r3, [r7, #16]
						sCommand.AddressMode = TS_QSPI_ADDRESS_1_LINE;
 8001294:	2301      	movs	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
						sCommand.Address     = TdAddress;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	617b      	str	r3, [r7, #20]
						sCommand.DataMode    = TS_QSPI_DATA_4_LINES;
 800129c:	2303      	movs	r3, #3
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
						sCommand.DummyCycles = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
						sCommand.NbData=TdSize;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
						sCommand.InstructionMode   = TS_QSPI_INSTRUCTION_1_LINE;
 80012a8:	2301      	movs	r3, #1
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
						sCommand.DdrMode           = TS_QSPI_DDR_MODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
						sCommand.DdrHoldHalfCycle  = TS_QSPI_DDR_HHC_ANALOG_DELAY;
 80012b0:	2300      	movs	r3, #0
 80012b2:	643b      	str	r3, [r7, #64]	; 0x40
						sCommand.SIOOMode          = TS_QSPI_SIOO_INST_EVERY_CMD;
 80012b4:	2300      	movs	r3, #0
 80012b6:	647b      	str	r3, [r7, #68]	; 0x44
						sCommand.AlternateBytes	=	0xF0;
 80012b8:	23f0      	movs	r3, #240	; 0xf0
 80012ba:	61bb      	str	r3, [r7, #24]


						err_code	=	(*(pHdle->qspi_command_send))( &sCommand,timeout);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f107 0210 	add.w	r2, r7, #16
 80012c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80012c6:	4610      	mov	r0, r2
 80012c8:	4798      	blx	r3
 80012ca:	4603      	mov	r3, r0
 80012cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

						if(err_code	==	ERR_W25Q128JV_NO_ERROR)
 80012d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d107      	bne.n	80012e8 <w25q128jv_quad_input_page_program+0xdc>
						{
							err_code	=(*(pHdle->qspi_transmit))(pTdBuffer,timeout);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	4798      	blx	r3
 80012e2:	4603      	mov	r3, r0
 80012e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			}
		}
	}


	return w25q128jv_error_cnvrt(err_code);
 80012e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f84f 	bl	8001390 <w25q128jv_error_cnvrt>
 80012f2:	4603      	mov	r3, r0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3750      	adds	r7, #80	; 0x50
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <w25q128jv_wait_until_busy_reset>:

static inline EW25Q128JVErrorCode w25q128jv_wait_until_busy_reset(SW25Q128JV_Handle *pHdle, uint32_t interval)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b098      	sub	sp, #96	; 0x60
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	EW25Q128JVErrorCode err_code = ERR_W25Q128JV_NO_ERROR;
 8001306:	2300      	movs	r3, #0
 8001308:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	TS_QSPI_CommandTypeDef sCommand;
	TS_QSPI_AutoPollingTypeDef sAutopol;
	uint32_t timeout;//Crash Protection Timeout


	sAutopol.AutomaticStop=TS_QSPI_AUTOMATIC_STOP_ENABLE;
 800130c:	2301      	movs	r3, #1
 800130e:	61fb      	str	r3, [r7, #28]
	sAutopol.Interval=interval;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	613b      	str	r3, [r7, #16]
	sAutopol.Mask=0X1;
 8001314:	2301      	movs	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
	sAutopol.Match=0X0;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
	sAutopol.MatchMode=TS_QSPI_MATCH_MODE_AND;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
	sAutopol.StatusBytesSize=1;
 8001320:	2301      	movs	r3, #1
 8001322:	617b      	str	r3, [r7, #20]

	sCommand.AddressSize       = TS_QSPI_ADDRESS_24_BITS;
 8001324:	2302      	movs	r3, #2
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AlternateByteMode = TS_QSPI_ALTERNATE_BYTES_NONE;
 8001328:	2300      	movs	r3, #0
 800132a:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.AlternateBytesSize=TS_QSPI_ALTERNATE_BYTES_8_BITS;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.Instruction = W25Q128JV_INS_READ_STATUS_REG_1;
 8001330:	2305      	movs	r3, #5
 8001332:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = TS_QSPI_ADDRESS_NONE;
 8001334:	2300      	movs	r3, #0
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address     = 0x0;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode    = TS_QSPI_DATA_1_LINE;
 800133c:	2301      	movs	r3, #1
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DummyCycles = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.NbData=1;
 8001344:	2301      	movs	r3, #1
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.InstructionMode   = TS_QSPI_INSTRUCTION_1_LINE;
 8001348:	2301      	movs	r3, #1
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DdrMode           = TS_QSPI_DDR_MODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.DdrHoldHalfCycle  = TS_QSPI_DDR_HHC_ANALOG_DELAY;
 8001350:	2300      	movs	r3, #0
 8001352:	653b      	str	r3, [r7, #80]	; 0x50
	sCommand.SIOOMode          = TS_QSPI_SIOO_INST_EVERY_CMD;
 8001354:	2300      	movs	r3, #0
 8001356:	657b      	str	r3, [r7, #84]	; 0x54
	sCommand.AlternateBytes	=	0x00;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28

	timeout=200000;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <w25q128jv_wait_until_busy_reset+0x90>)
 800135e:	65bb      	str	r3, [r7, #88]	; 0x58

	err_code	= (*(pHdle->qspi_auto_polling))(&sCommand,&sAutopol,timeout);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f107 0108 	add.w	r1, r7, #8
 8001368:	f107 0020 	add.w	r0, r7, #32
 800136c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800136e:	4798      	blx	r3
 8001370:	4603      	mov	r3, r0
 8001372:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	return w25q128jv_error_cnvrt(err_code);
 8001376:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f808 	bl	8001390 <w25q128jv_error_cnvrt>
 8001380:	4603      	mov	r3, r0

}
 8001382:	4618      	mov	r0, r3
 8001384:	3760      	adds	r7, #96	; 0x60
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	00030d40 	.word	0x00030d40

08001390 <w25q128jv_error_cnvrt>:
	return w25q128jv_error_cnvrt(err_code);

}

static inline EW25Q128JVErrorCode w25q128jv_error_cnvrt(EErrorCode err_code)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	switch(err_code)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <w25q128jv_error_cnvrt+0xc8>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d03d      	beq.n	800141c <w25q128jv_error_cnvrt+0x8c>
 80013a0:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <w25q128jv_error_cnvrt+0xc8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d812      	bhi.n	80013cc <w25q128jv_error_cnvrt+0x3c>
 80013a6:	4a2d      	ldr	r2, [pc, #180]	; (800145c <w25q128jv_error_cnvrt+0xcc>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d02b      	beq.n	8001404 <w25q128jv_error_cnvrt+0x74>
 80013ac:	4a2b      	ldr	r2, [pc, #172]	; (800145c <w25q128jv_error_cnvrt+0xcc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d805      	bhi.n	80013be <w25q128jv_error_cnvrt+0x2e>
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d021      	beq.n	80013fa <w25q128jv_error_cnvrt+0x6a>
 80013b6:	4a2a      	ldr	r2, [pc, #168]	; (8001460 <w25q128jv_error_cnvrt+0xd0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d020      	beq.n	80013fe <w25q128jv_error_cnvrt+0x6e>
 80013bc:	e043      	b.n	8001446 <w25q128jv_error_cnvrt+0xb6>
 80013be:	4a29      	ldr	r2, [pc, #164]	; (8001464 <w25q128jv_error_cnvrt+0xd4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d025      	beq.n	8001410 <w25q128jv_error_cnvrt+0x80>
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <w25q128jv_error_cnvrt+0xd4>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d825      	bhi.n	8001416 <w25q128jv_error_cnvrt+0x86>
 80013ca:	e01e      	b.n	800140a <w25q128jv_error_cnvrt+0x7a>
 80013cc:	4a26      	ldr	r2, [pc, #152]	; (8001468 <w25q128jv_error_cnvrt+0xd8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d02d      	beq.n	800142e <w25q128jv_error_cnvrt+0x9e>
 80013d2:	4a25      	ldr	r2, [pc, #148]	; (8001468 <w25q128jv_error_cnvrt+0xd8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d806      	bhi.n	80013e6 <w25q128jv_error_cnvrt+0x56>
 80013d8:	4a24      	ldr	r2, [pc, #144]	; (800146c <w25q128jv_error_cnvrt+0xdc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d021      	beq.n	8001422 <w25q128jv_error_cnvrt+0x92>
 80013de:	4a24      	ldr	r2, [pc, #144]	; (8001470 <w25q128jv_error_cnvrt+0xe0>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d021      	beq.n	8001428 <w25q128jv_error_cnvrt+0x98>
 80013e4:	e02f      	b.n	8001446 <w25q128jv_error_cnvrt+0xb6>
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <w25q128jv_error_cnvrt+0xe4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d026      	beq.n	800143a <w25q128jv_error_cnvrt+0xaa>
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <w25q128jv_error_cnvrt+0xe4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d320      	bcc.n	8001434 <w25q128jv_error_cnvrt+0xa4>
 80013f2:	4a21      	ldr	r2, [pc, #132]	; (8001478 <w25q128jv_error_cnvrt+0xe8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d023      	beq.n	8001440 <w25q128jv_error_cnvrt+0xb0>
 80013f8:	e025      	b.n	8001446 <w25q128jv_error_cnvrt+0xb6>
	{
	case ERR_NO_ERROR:return ERR_W25Q128JV_NO_ERROR;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e025      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_NOT_SUPPORTED:return ERR_W25Q128JV_QSPI_INIT_FAIL;
 80013fe:	f241 0302 	movw	r3, #4098	; 0x1002
 8001402:	e022      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_INIT_FAIL:return	ERR_W25Q128JV_QSPI_INIT_FAIL;
 8001404:	f241 0302 	movw	r3, #4098	; 0x1002
 8001408:	e01f      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_DEINIT_FAIL:return ERR_W25Q128JV_QSPI_DEINIT_FAIL;
 800140a:	f241 0303 	movw	r3, #4099	; 0x1003
 800140e:	e01c      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_NOT_INITILIZED:return	ERR_W25Q128JV_INIT_FAIL;
 8001410:	f241 0301 	movw	r3, #4097	; 0x1001
 8001414:	e019      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_DMA_TX_FAIL:return	ERR_W25Q128JV_QSPI_TX_FAIL;
 8001416:	f241 0304 	movw	r3, #4100	; 0x1004
 800141a:	e016      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_DMA_TX_TIMEOUT:return ERR_W25Q128JV_QSPI_TX_FAIL;
 800141c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001420:	e013      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_DMA_RX_FAIL:return	ERR_W25Q128JV_QSPI_RX_FAIL;
 8001422:	f241 0305 	movw	r3, #4101	; 0x1005
 8001426:	e010      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_DMA_RX_TIMEOUT:return  ERR_W25Q128JV_QSPI_RX_FAIL;
 8001428:	f241 0305 	movw	r3, #4101	; 0x1005
 800142c:	e00d      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_IT_CMD_FAIL:return ERR_W25Q128JV_QSPI_CMD_FAIL;
 800142e:	f241 0306 	movw	r3, #4102	; 0x1006
 8001432:	e00a      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_IT_CMD_TIMEOUT:return ERR_W25Q128JV_CMD_TOUT;
 8001434:	f241 0308 	movw	r3, #4104	; 0x1008
 8001438:	e007      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_STRUCT_FAIL:return ERR_W25Q128JV_QSPI_CMD_FAIL;
 800143a:	f241 0306 	movw	r3, #4102	; 0x1006
 800143e:	e004      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	case ERR_PCOM_QSPI_IT_AUTOPOL_FAIL:return ERR_W25Q128JV_QSPI_AUTOPOL_FAIL;
 8001440:	f241 030e 	movw	r3, #4110	; 0x100e
 8001444:	e001      	b.n	800144a <w25q128jv_error_cnvrt+0xba>

	default:return err_code;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	b29b      	uxth	r3, r3
	}
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	0001201d 	.word	0x0001201d
 800145c:	00012019 	.word	0x00012019
 8001460:	00012018 	.word	0x00012018
 8001464:	0001201b 	.word	0x0001201b
 8001468:	00012020 	.word	0x00012020
 800146c:	0001201e 	.word	0x0001201e
 8001470:	0001201f 	.word	0x0001201f
 8001474:	00012022 	.word	0x00012022
 8001478:	00012023 	.word	0x00012023

0800147c <wrap_qspi_command_send>:

extern volatile enum DATA_TRANSFER qspi_transmission,qspi_reception,qspi_cmd_transmission;
extern volatile enum STATUS_MATCH qspi_status_match;

EErrorCode wrap_qspi_command_send(TS_QSPI_CommandTypeDef *sCommand,uint32_t timeout)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b092      	sub	sp, #72	; 0x48
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
	EErrorCode err_code = ERR_NO_ERROR;
 8001486:	2300      	movs	r3, #0
 8001488:	647b      	str	r3, [r7, #68]	; 0x44
	QSPI_CommandTypeDef scommand;


	scommand.Address=sCommand->Address;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	613b      	str	r3, [r7, #16]
	scommand.Instruction=sCommand->Instruction;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	60fb      	str	r3, [r7, #12]
	scommand.AlternateBytes=sCommand->AlternateBytes;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	617b      	str	r3, [r7, #20]
	scommand.DummyCycles=sCommand->DummyCycles;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	623b      	str	r3, [r7, #32]
	scommand.NbData=sCommand->NbData;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34


	switch(sCommand->AddressSize)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d81a      	bhi.n	80014e6 <wrap_qspi_command_send+0x6a>
 80014b0:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <wrap_qspi_command_send+0x3c>)
 80014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014c9 	.word	0x080014c9
 80014bc:	080014cf 	.word	0x080014cf
 80014c0:	080014d7 	.word	0x080014d7
 80014c4:	080014df 	.word	0x080014df
	{
	case TS_QSPI_ADDRESS_8_BITS:scommand.AddressSize=QSPI_ADDRESS_8_BITS;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
	break;
 80014cc:	e00d      	b.n	80014ea <wrap_qspi_command_send+0x6e>
	case TS_QSPI_ADDRESS_16_BITS:scommand.AddressSize=QSPI_ADDRESS_16_BITS;
 80014ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d2:	61bb      	str	r3, [r7, #24]
	break;
 80014d4:	e009      	b.n	80014ea <wrap_qspi_command_send+0x6e>
	case TS_QSPI_ADDRESS_24_BITS:scommand.AddressSize=QSPI_ADDRESS_24_BITS;
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	61bb      	str	r3, [r7, #24]
	break;
 80014dc:	e005      	b.n	80014ea <wrap_qspi_command_send+0x6e>
	case TS_QSPI_ADDRESS_32_BITS:scommand.AddressSize=QSPI_ADDRESS_32_BITS;
 80014de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014e2:	61bb      	str	r3, [r7, #24]
	break;
 80014e4:	e001      	b.n	80014ea <wrap_qspi_command_send+0x6e>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 80014e6:	4b78      	ldr	r3, [pc, #480]	; (80016c8 <wrap_qspi_command_send+0x24c>)
 80014e8:	e0ea      	b.n	80016c0 <wrap_qspi_command_send+0x244>
	}
	switch(sCommand->AddressMode)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d819      	bhi.n	8001526 <wrap_qspi_command_send+0xaa>
 80014f2:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <wrap_qspi_command_send+0x7c>)
 80014f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f8:	08001509 	.word	0x08001509
 80014fc:	0800150f 	.word	0x0800150f
 8001500:	08001517 	.word	0x08001517
 8001504:	0800151f 	.word	0x0800151f
	{
	case TS_QSPI_ADDRESS_NONE:scommand.AddressMode=QSPI_ADDRESS_NONE;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 800150c:	e00d      	b.n	800152a <wrap_qspi_command_send+0xae>
	case TS_QSPI_ADDRESS_1_LINE:scommand.AddressMode=QSPI_ADDRESS_1_LINE;
 800150e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 8001514:	e009      	b.n	800152a <wrap_qspi_command_send+0xae>
	case TS_QSPI_ADDRESS_2_LINES:scommand.AddressMode=QSPI_ADDRESS_2_LINES;
 8001516:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 800151c:	e005      	b.n	800152a <wrap_qspi_command_send+0xae>
	case TS_QSPI_ADDRESS_4_LINES:scommand.AddressMode=QSPI_ADDRESS_4_LINES;
 800151e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 8001524:	e001      	b.n	800152a <wrap_qspi_command_send+0xae>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001526:	4b68      	ldr	r3, [pc, #416]	; (80016c8 <wrap_qspi_command_send+0x24c>)
 8001528:	e0ca      	b.n	80016c0 <wrap_qspi_command_send+0x244>
	}
	switch(sCommand->AlternateByteMode)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	2b03      	cmp	r3, #3
 8001530:	d819      	bhi.n	8001566 <wrap_qspi_command_send+0xea>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <wrap_qspi_command_send+0xbc>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	08001549 	.word	0x08001549
 800153c:	0800154f 	.word	0x0800154f
 8001540:	08001557 	.word	0x08001557
 8001544:	0800155f 	.word	0x0800155f
	{
	case TS_QSPI_ALTERNATE_BYTES_NONE:scommand.AlternateByteMode=QSPI_ALTERNATE_BYTES_NONE;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
	break;
 800154c:	e00d      	b.n	800156a <wrap_qspi_command_send+0xee>
	case TS_QSPI_ALTERNATE_BYTES_1_LINE:scommand.AlternateByteMode=QSPI_ALTERNATE_BYTES_1_LINE;
 800154e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
	break;
 8001554:	e009      	b.n	800156a <wrap_qspi_command_send+0xee>
	case TS_QSPI_ALTERNATE_BYTES_2_LINES:scommand.AlternateByteMode=QSPI_ALTERNATE_BYTES_2_LINES;
 8001556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
	break;
 800155c:	e005      	b.n	800156a <wrap_qspi_command_send+0xee>
	case TS_QSPI_ALTERNATE_BYTES_4_LINES:scommand.AlternateByteMode=QSPI_ALTERNATE_BYTES_4_LINES;
 800155e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
	break;
 8001564:	e001      	b.n	800156a <wrap_qspi_command_send+0xee>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001566:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <wrap_qspi_command_send+0x24c>)
 8001568:	e0aa      	b.n	80016c0 <wrap_qspi_command_send+0x244>
	}
	switch(sCommand->AlternateBytesSize)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d819      	bhi.n	80015a6 <wrap_qspi_command_send+0x12a>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <wrap_qspi_command_send+0xfc>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	0800158f 	.word	0x0800158f
 8001580:	08001597 	.word	0x08001597
 8001584:	0800159f 	.word	0x0800159f
	{
	case TS_QSPI_ALTERNATE_BYTES_8_BITS:scommand.AlternateBytesSize=QSPI_ALTERNATE_BYTES_8_BITS;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
	break;
 800158c:	e00d      	b.n	80015aa <wrap_qspi_command_send+0x12e>
	case TS_QSPI_ALTERNATE_BYTES_16_BITS:scommand.AlternateBytesSize=QSPI_ALTERNATE_BYTES_16_BITS;
 800158e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001592:	61fb      	str	r3, [r7, #28]
	break;
 8001594:	e009      	b.n	80015aa <wrap_qspi_command_send+0x12e>
	case TS_QSPI_ALTERNATE_BYTES_24_BITS:scommand.AlternateBytesSize=QSPI_ALTERNATE_BYTES_24_BITS;
 8001596:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159a:	61fb      	str	r3, [r7, #28]
	break;
 800159c:	e005      	b.n	80015aa <wrap_qspi_command_send+0x12e>
	case TS_QSPI_ALTERNATE_BYTES_32_BITS:scommand.AlternateBytesSize=QSPI_ALTERNATE_BYTES_32_BITS;
 800159e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80015a2:	61fb      	str	r3, [r7, #28]
	break;
 80015a4:	e001      	b.n	80015aa <wrap_qspi_command_send+0x12e>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 80015a6:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <wrap_qspi_command_send+0x24c>)
 80015a8:	e08a      	b.n	80016c0 <wrap_qspi_command_send+0x244>
	}

	switch(sCommand->DataMode)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d819      	bhi.n	80015e6 <wrap_qspi_command_send+0x16a>
 80015b2:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <wrap_qspi_command_send+0x13c>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015cf 	.word	0x080015cf
 80015c0:	080015d7 	.word	0x080015d7
 80015c4:	080015df 	.word	0x080015df
	{
	case TS_QSPI_DATA_NONE:scommand.DataMode=QSPI_DATA_NONE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
	break;
 80015cc:	e00d      	b.n	80015ea <wrap_qspi_command_send+0x16e>
	case TS_QSPI_DATA_1_LINE:scommand.DataMode=QSPI_DATA_1_LINE;
 80015ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
	break;
 80015d4:	e009      	b.n	80015ea <wrap_qspi_command_send+0x16e>
	case TS_QSPI_DATA_2_LINES:scommand.DataMode=QSPI_DATA_2_LINES;
 80015d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
	break;
 80015dc:	e005      	b.n	80015ea <wrap_qspi_command_send+0x16e>
	case TS_QSPI_DATA_4_LINES:scommand.DataMode=QSPI_DATA_4_LINES;
 80015de:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
	break;
 80015e4:	e001      	b.n	80015ea <wrap_qspi_command_send+0x16e>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 80015e6:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <wrap_qspi_command_send+0x24c>)
 80015e8:	e06a      	b.n	80016c0 <wrap_qspi_command_send+0x244>
	}
	switch(sCommand->InstructionMode)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d819      	bhi.n	8001626 <wrap_qspi_command_send+0x1aa>
 80015f2:	a201      	add	r2, pc, #4	; (adr r2, 80015f8 <wrap_qspi_command_send+0x17c>)
 80015f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f8:	08001609 	.word	0x08001609
 80015fc:	0800160f 	.word	0x0800160f
 8001600:	08001617 	.word	0x08001617
 8001604:	0800161f 	.word	0x0800161f
	{
	case  TS_QSPI_INSTRUCTION_NONE:scommand.InstructionMode=QSPI_INSTRUCTION_NONE;
 8001608:	2300      	movs	r3, #0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
	break;
 800160c:	e00d      	b.n	800162a <wrap_qspi_command_send+0x1ae>
	case TS_QSPI_INSTRUCTION_1_LINE:scommand.InstructionMode=QSPI_INSTRUCTION_1_LINE;
 800160e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
	break;
 8001614:	e009      	b.n	800162a <wrap_qspi_command_send+0x1ae>
	case TS_QSPI_INSTRUCTION_2_LINES:scommand.InstructionMode=QSPI_INSTRUCTION_2_LINES;
 8001616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
	break;
 800161c:	e005      	b.n	800162a <wrap_qspi_command_send+0x1ae>
	case TS_QSPI_INSTRUCTION_4_LINES:scommand.InstructionMode=QSPI_INSTRUCTION_4_LINES;
 800161e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
	break;
 8001624:	e001      	b.n	800162a <wrap_qspi_command_send+0x1ae>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <wrap_qspi_command_send+0x24c>)
 8001628:	e04a      	b.n	80016c0 <wrap_qspi_command_send+0x244>
	}

	switch(sCommand->DdrMode)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <wrap_qspi_command_send+0x1bc>
 8001632:	2b01      	cmp	r3, #1
 8001634:	d003      	beq.n	800163e <wrap_qspi_command_send+0x1c2>
 8001636:	e006      	b.n	8001646 <wrap_qspi_command_send+0x1ca>
	{
	case TS_QSPI_DDR_MODE_DISABLE:scommand.DdrMode=QSPI_DDR_MODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	63bb      	str	r3, [r7, #56]	; 0x38
	break;
 800163c:	e005      	b.n	800164a <wrap_qspi_command_send+0x1ce>
	case TS_QSPI_DDR_MODE_ENABLE:scommand.DdrMode=QSPI_DDR_MODE_ENABLE;
 800163e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001642:	63bb      	str	r3, [r7, #56]	; 0x38
	break;
 8001644:	e001      	b.n	800164a <wrap_qspi_command_send+0x1ce>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <wrap_qspi_command_send+0x24c>)
 8001648:	e03a      	b.n	80016c0 <wrap_qspi_command_send+0x244>
	}

	switch (sCommand->DdrHoldHalfCycle)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <wrap_qspi_command_send+0x1dc>
 8001652:	2b01      	cmp	r3, #1
 8001654:	d003      	beq.n	800165e <wrap_qspi_command_send+0x1e2>
 8001656:	e006      	b.n	8001666 <wrap_qspi_command_send+0x1ea>
	{
	case TS_QSPI_DDR_HHC_ANALOG_DELAY:scommand.DdrHoldHalfCycle=QSPI_DDR_HHC_ANALOG_DELAY;
 8001658:	2300      	movs	r3, #0
 800165a:	63fb      	str	r3, [r7, #60]	; 0x3c
	break;
 800165c:	e005      	b.n	800166a <wrap_qspi_command_send+0x1ee>
	case TS_QSPI_DDR_HHC_HALF_CLK_DELAY:scommand.DdrHoldHalfCycle=QSPI_DDR_HHC_HALF_CLK_DELAY;
 800165e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
	break;
 8001664:	e001      	b.n	800166a <wrap_qspi_command_send+0x1ee>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <wrap_qspi_command_send+0x24c>)
 8001668:	e02a      	b.n	80016c0 <wrap_qspi_command_send+0x244>
	}
	switch(sCommand->SIOOMode)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <wrap_qspi_command_send+0x1fc>
 8001672:	2b01      	cmp	r3, #1
 8001674:	d003      	beq.n	800167e <wrap_qspi_command_send+0x202>
 8001676:	e006      	b.n	8001686 <wrap_qspi_command_send+0x20a>
	{
	case TS_QSPI_SIOO_INST_EVERY_CMD:scommand.SIOOMode=QSPI_SIOO_INST_EVERY_CMD;
 8001678:	2300      	movs	r3, #0
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
	break;
 800167c:	e005      	b.n	800168a <wrap_qspi_command_send+0x20e>
	case TS_QSPI_SIOO_INST_ONLY_FIRST_CMD:scommand.SIOOMode=QSPI_SIOO_INST_ONLY_FIRST_CMD;
 800167e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001682:	643b      	str	r3, [r7, #64]	; 0x40
	break;
 8001684:	e001      	b.n	800168a <wrap_qspi_command_send+0x20e>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <wrap_qspi_command_send+0x24c>)
 8001688:	e01a      	b.n	80016c0 <wrap_qspi_command_send+0x244>





	qspi_cmd_transmission	=	START;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <wrap_qspi_command_send+0x250>)
 800168c:	220b      	movs	r2, #11
 800168e:	701a      	strb	r2, [r3, #0]
	if (HAL_QSPI_Command_IT(&hqspi,&scommand)!=	HAL_OK)
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4619      	mov	r1, r3
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <wrap_qspi_command_send+0x254>)
 8001698:	f001 fb54 	bl	8002d44 <HAL_QSPI_Command_IT>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <wrap_qspi_command_send+0x22a>
	{
		return ERR_PCOM_QSPI_IT_CMD_FAIL;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <wrap_qspi_command_send+0x258>)
 80016a4:	e00c      	b.n	80016c0 <wrap_qspi_command_send+0x244>
	}
	else
	{
		if(sCommand->NbData==0)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d105      	bne.n	80016ba <wrap_qspi_command_send+0x23e>
		{
			while(qspi_cmd_transmission != END);
 80016ae:	bf00      	nop
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <wrap_qspi_command_send+0x250>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b0a      	cmp	r3, #10
 80016b8:	d1fa      	bne.n	80016b0 <wrap_qspi_command_send+0x234>
		}
		err_code = ERR_NO_ERROR;
 80016ba:	2300      	movs	r3, #0
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
	}
	return err_code;
 80016be:	6c7b      	ldr	r3, [r7, #68]	; 0x44

}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3748      	adds	r7, #72	; 0x48
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	00012022 	.word	0x00012022
 80016cc:	200000f5 	.word	0x200000f5
 80016d0:	20000158 	.word	0x20000158
 80016d4:	00012020 	.word	0x00012020

080016d8 <wrap_qspi_receive>:

EErrorCode wrap_qspi_receive(uint8_t *pRdBuffer,uint32_t timeout)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	EErrorCode err_code = ERR_NO_ERROR;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]

	qspi_reception	=	START;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <wrap_qspi_receive+0x40>)
 80016e8:	220b      	movs	r2, #11
 80016ea:	701a      	strb	r2, [r3, #0]
	if(HAL_QSPI_Receive_DMA(&hqspi,pRdBuffer)!=HAL_OK)
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	480b      	ldr	r0, [pc, #44]	; (800171c <wrap_qspi_receive+0x44>)
 80016f0:	f001 fc90 	bl	8003014 <HAL_QSPI_Receive_DMA>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <wrap_qspi_receive+0x26>
	{
		return ERR_PCOM_QSPI_DMA_RX_FAIL;
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <wrap_qspi_receive+0x48>)
 80016fc:	e008      	b.n	8001710 <wrap_qspi_receive+0x38>
	}
	else
	{
		while(qspi_reception	!=	END);
 80016fe:	bf00      	nop
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <wrap_qspi_receive+0x40>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b0a      	cmp	r3, #10
 8001708:	d1fa      	bne.n	8001700 <wrap_qspi_receive+0x28>
		err_code = ERR_NO_ERROR;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
	}

	return err_code;
 800170e:	68fb      	ldr	r3, [r7, #12]



}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200000f6 	.word	0x200000f6
 800171c:	20000158 	.word	0x20000158
 8001720:	0001201e 	.word	0x0001201e

08001724 <wrap_qspi_transmit>:


EErrorCode wrap_qspi_transmit(uint8_t *pTdBuffer,uint32_t timeout)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]

	EErrorCode err_code = ERR_NO_ERROR;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]


	qspi_transmission	=	START;
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <wrap_qspi_transmit+0x40>)
 8001734:	220b      	movs	r2, #11
 8001736:	701a      	strb	r2, [r3, #0]
	if(HAL_QSPI_Transmit_DMA(&hqspi,pTdBuffer)!=HAL_OK)
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <wrap_qspi_transmit+0x44>)
 800173c:	f001 fb68 	bl	8002e10 <HAL_QSPI_Transmit_DMA>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <wrap_qspi_transmit+0x26>
	{
		return ERR_PCOM_QSPI_DMA_TX_FAIL;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <wrap_qspi_transmit+0x48>)
 8001748:	e008      	b.n	800175c <wrap_qspi_transmit+0x38>
	}
	else
	{
		while(qspi_transmission	!=	END);
 800174a:	bf00      	nop
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <wrap_qspi_transmit+0x40>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b0a      	cmp	r3, #10
 8001754:	d1fa      	bne.n	800174c <wrap_qspi_transmit+0x28>
		 err_code = ERR_NO_ERROR;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
	}
	return err_code;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200000f7 	.word	0x200000f7
 8001768:	20000158 	.word	0x20000158
 800176c:	0001201c 	.word	0x0001201c

08001770 <wrap_qspi_auto_polling>:

EErrorCode wrap_qspi_auto_polling(TS_QSPI_CommandTypeDef *sCommand,TS_QSPI_AutoPollingTypeDef *sAutopol,uint32_t timeout)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b09a      	sub	sp, #104	; 0x68
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]

	EErrorCode err_code = ERR_NO_ERROR;
 800177c:	2300      	movs	r3, #0
 800177e:	667b      	str	r3, [r7, #100]	; 0x64
	QSPI_CommandTypeDef scommand;
	QSPI_AutoPollingTypeDef sautopol;

	sautopol.Interval	=sAutopol->Interval;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	61fb      	str	r3, [r7, #28]
	sautopol.Mask	=sAutopol->Mask;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
	sautopol.Match	=sAutopol->Match;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	617b      	str	r3, [r7, #20]
	sautopol.StatusBytesSize	=sAutopol->StatusBytesSize;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	623b      	str	r3, [r7, #32]


	switch(sAutopol->AutomaticStop)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d002      	beq.n	80017a6 <wrap_qspi_auto_polling+0x36>
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d003      	beq.n	80017ac <wrap_qspi_auto_polling+0x3c>
 80017a4:	e006      	b.n	80017b4 <wrap_qspi_auto_polling+0x44>
	{
	case TS_QSPI_AUTOMATIC_STOP_DISABLE:sautopol.AutomaticStop=QSPI_AUTOMATIC_STOP_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 80017aa:	e005      	b.n	80017b8 <wrap_qspi_auto_polling+0x48>
	case TS_QSPI_AUTOMATIC_STOP_ENABLE:sautopol.AutomaticStop=QSPI_AUTOMATIC_STOP_ENABLE;
 80017ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 80017b2:	e001      	b.n	80017b8 <wrap_qspi_auto_polling+0x48>

	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 80017b4:	4b96      	ldr	r3, [pc, #600]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 80017b6:	e127      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}

	switch(sAutopol->MatchMode)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <wrap_qspi_auto_polling+0x56>
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d003      	beq.n	80017cc <wrap_qspi_auto_polling+0x5c>
 80017c4:	e006      	b.n	80017d4 <wrap_qspi_auto_polling+0x64>
	{
	case TS_QSPI_MATCH_MODE_AND:sautopol.MatchMode=QSPI_MATCH_MODE_AND;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
	break;
 80017ca:	e005      	b.n	80017d8 <wrap_qspi_auto_polling+0x68>
	case TS_QSPI_MATCH_MODE_OR:sautopol.MatchMode=QSPI_MATCH_MODE_OR;
 80017cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
	break;
 80017d2:	e001      	b.n	80017d8 <wrap_qspi_auto_polling+0x68>

	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 80017d4:	4b8e      	ldr	r3, [pc, #568]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 80017d6:	e117      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>

	}

	scommand.Address=sCommand->Address;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
	scommand.Instruction=sCommand->Instruction;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	scommand.AlternateBytes=sCommand->AlternateBytes;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
	scommand.DummyCycles=sCommand->DummyCycles;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	643b      	str	r3, [r7, #64]	; 0x40
	scommand.NbData=sCommand->NbData;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	657b      	str	r3, [r7, #84]	; 0x54


	switch(sCommand->AddressSize)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d819      	bhi.n	8001832 <wrap_qspi_auto_polling+0xc2>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <wrap_qspi_auto_polling+0x94>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001815 	.word	0x08001815
 8001808:	0800181b 	.word	0x0800181b
 800180c:	08001823 	.word	0x08001823
 8001810:	0800182b 	.word	0x0800182b
	{
	case TS_QSPI_ADDRESS_8_BITS:scommand.AddressSize=QSPI_ADDRESS_8_BITS;
 8001814:	2300      	movs	r3, #0
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
	break;
 8001818:	e00d      	b.n	8001836 <wrap_qspi_auto_polling+0xc6>
	case TS_QSPI_ADDRESS_16_BITS:scommand.AddressSize=QSPI_ADDRESS_16_BITS;
 800181a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181e:	63bb      	str	r3, [r7, #56]	; 0x38
	break;
 8001820:	e009      	b.n	8001836 <wrap_qspi_auto_polling+0xc6>
	case TS_QSPI_ADDRESS_24_BITS:scommand.AddressSize=QSPI_ADDRESS_24_BITS;
 8001822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001826:	63bb      	str	r3, [r7, #56]	; 0x38
	break;
 8001828:	e005      	b.n	8001836 <wrap_qspi_auto_polling+0xc6>
	case TS_QSPI_ADDRESS_32_BITS:scommand.AddressSize=QSPI_ADDRESS_32_BITS;
 800182a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
	break;
 8001830:	e001      	b.n	8001836 <wrap_qspi_auto_polling+0xc6>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001832:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 8001834:	e0e8      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}
	switch(sCommand->AddressMode)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	2b03      	cmp	r3, #3
 800183c:	d819      	bhi.n	8001872 <wrap_qspi_auto_polling+0x102>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <wrap_qspi_auto_polling+0xd4>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	08001855 	.word	0x08001855
 8001848:	0800185b 	.word	0x0800185b
 800184c:	08001863 	.word	0x08001863
 8001850:	0800186b 	.word	0x0800186b
	{
	case TS_QSPI_ADDRESS_NONE:scommand.AddressMode=QSPI_ADDRESS_NONE;
 8001854:	2300      	movs	r3, #0
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
	break;
 8001858:	e00d      	b.n	8001876 <wrap_qspi_auto_polling+0x106>
	case TS_QSPI_ADDRESS_1_LINE:scommand.AddressMode=QSPI_ADDRESS_1_LINE;
 800185a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
	break;
 8001860:	e009      	b.n	8001876 <wrap_qspi_auto_polling+0x106>
	case TS_QSPI_ADDRESS_2_LINES:scommand.AddressMode=QSPI_ADDRESS_2_LINES;
 8001862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001866:	64bb      	str	r3, [r7, #72]	; 0x48
	break;
 8001868:	e005      	b.n	8001876 <wrap_qspi_auto_polling+0x106>
	case TS_QSPI_ADDRESS_4_LINES:scommand.AddressMode=QSPI_ADDRESS_4_LINES;
 800186a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800186e:	64bb      	str	r3, [r7, #72]	; 0x48
	break;
 8001870:	e001      	b.n	8001876 <wrap_qspi_auto_polling+0x106>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001872:	4b67      	ldr	r3, [pc, #412]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 8001874:	e0c8      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}
	switch(sCommand->AlternateByteMode)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d819      	bhi.n	80018b2 <wrap_qspi_auto_polling+0x142>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <wrap_qspi_auto_polling+0x114>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	08001895 	.word	0x08001895
 8001888:	0800189b 	.word	0x0800189b
 800188c:	080018a3 	.word	0x080018a3
 8001890:	080018ab 	.word	0x080018ab
	{
	case TS_QSPI_ALTERNATE_BYTES_NONE:scommand.AlternateByteMode=QSPI_ALTERNATE_BYTES_NONE;
 8001894:	2300      	movs	r3, #0
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
	break;
 8001898:	e00d      	b.n	80018b6 <wrap_qspi_auto_polling+0x146>
	case TS_QSPI_ALTERNATE_BYTES_1_LINE:scommand.AlternateByteMode=QSPI_ALTERNATE_BYTES_1_LINE;
 800189a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800189e:	64fb      	str	r3, [r7, #76]	; 0x4c
	break;
 80018a0:	e009      	b.n	80018b6 <wrap_qspi_auto_polling+0x146>
	case TS_QSPI_ALTERNATE_BYTES_2_LINES:scommand.AlternateByteMode=QSPI_ALTERNATE_BYTES_2_LINES;
 80018a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	break;
 80018a8:	e005      	b.n	80018b6 <wrap_qspi_auto_polling+0x146>
	case TS_QSPI_ALTERNATE_BYTES_4_LINES:scommand.AlternateByteMode=QSPI_ALTERNATE_BYTES_4_LINES;
 80018aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	break;
 80018b0:	e001      	b.n	80018b6 <wrap_qspi_auto_polling+0x146>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 80018b2:	4b57      	ldr	r3, [pc, #348]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 80018b4:	e0a8      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}
	switch(sCommand->AlternateBytesSize)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d819      	bhi.n	80018f2 <wrap_qspi_auto_polling+0x182>
 80018be:	a201      	add	r2, pc, #4	; (adr r2, 80018c4 <wrap_qspi_auto_polling+0x154>)
 80018c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c4:	080018d5 	.word	0x080018d5
 80018c8:	080018db 	.word	0x080018db
 80018cc:	080018e3 	.word	0x080018e3
 80018d0:	080018eb 	.word	0x080018eb
	{
	case TS_QSPI_ALTERNATE_BYTES_8_BITS:scommand.AlternateBytesSize=QSPI_ALTERNATE_BYTES_8_BITS;
 80018d4:	2300      	movs	r3, #0
 80018d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	break;
 80018d8:	e00d      	b.n	80018f6 <wrap_qspi_auto_polling+0x186>
	case TS_QSPI_ALTERNATE_BYTES_16_BITS:scommand.AlternateBytesSize=QSPI_ALTERNATE_BYTES_16_BITS;
 80018da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
	break;
 80018e0:	e009      	b.n	80018f6 <wrap_qspi_auto_polling+0x186>
	case TS_QSPI_ALTERNATE_BYTES_24_BITS:scommand.AlternateBytesSize=QSPI_ALTERNATE_BYTES_24_BITS;
 80018e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	break;
 80018e8:	e005      	b.n	80018f6 <wrap_qspi_auto_polling+0x186>
	case TS_QSPI_ALTERNATE_BYTES_32_BITS:scommand.AlternateBytesSize=QSPI_ALTERNATE_BYTES_32_BITS;
 80018ea:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	break;
 80018f0:	e001      	b.n	80018f6 <wrap_qspi_auto_polling+0x186>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 80018f4:	e088      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}

	switch(sCommand->DataMode)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d819      	bhi.n	8001932 <wrap_qspi_auto_polling+0x1c2>
 80018fe:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <wrap_qspi_auto_polling+0x194>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	08001915 	.word	0x08001915
 8001908:	0800191b 	.word	0x0800191b
 800190c:	08001923 	.word	0x08001923
 8001910:	0800192b 	.word	0x0800192b
	{
	case TS_QSPI_DATA_NONE:scommand.DataMode=QSPI_DATA_NONE;
 8001914:	2300      	movs	r3, #0
 8001916:	653b      	str	r3, [r7, #80]	; 0x50
	break;
 8001918:	e00d      	b.n	8001936 <wrap_qspi_auto_polling+0x1c6>
	case TS_QSPI_DATA_1_LINE:scommand.DataMode=QSPI_DATA_1_LINE;
 800191a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800191e:	653b      	str	r3, [r7, #80]	; 0x50
	break;
 8001920:	e009      	b.n	8001936 <wrap_qspi_auto_polling+0x1c6>
	case TS_QSPI_DATA_2_LINES:scommand.DataMode=QSPI_DATA_2_LINES;
 8001922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001926:	653b      	str	r3, [r7, #80]	; 0x50
	break;
 8001928:	e005      	b.n	8001936 <wrap_qspi_auto_polling+0x1c6>
	case TS_QSPI_DATA_4_LINES:scommand.DataMode=QSPI_DATA_4_LINES;
 800192a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800192e:	653b      	str	r3, [r7, #80]	; 0x50
	break;
 8001930:	e001      	b.n	8001936 <wrap_qspi_auto_polling+0x1c6>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 8001934:	e068      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}
	switch(sCommand->InstructionMode)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d819      	bhi.n	8001972 <wrap_qspi_auto_polling+0x202>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <wrap_qspi_auto_polling+0x1d4>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001955 	.word	0x08001955
 8001948:	0800195b 	.word	0x0800195b
 800194c:	08001963 	.word	0x08001963
 8001950:	0800196b 	.word	0x0800196b
	{
	case  TS_QSPI_INSTRUCTION_NONE:scommand.InstructionMode=QSPI_INSTRUCTION_NONE;
 8001954:	2300      	movs	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	; 0x44
	break;
 8001958:	e00d      	b.n	8001976 <wrap_qspi_auto_polling+0x206>
	case TS_QSPI_INSTRUCTION_1_LINE:scommand.InstructionMode=QSPI_INSTRUCTION_1_LINE;
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
	break;
 8001960:	e009      	b.n	8001976 <wrap_qspi_auto_polling+0x206>
	case TS_QSPI_INSTRUCTION_2_LINES:scommand.InstructionMode=QSPI_INSTRUCTION_2_LINES;
 8001962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001966:	647b      	str	r3, [r7, #68]	; 0x44
	break;
 8001968:	e005      	b.n	8001976 <wrap_qspi_auto_polling+0x206>
	case TS_QSPI_INSTRUCTION_4_LINES:scommand.InstructionMode=QSPI_INSTRUCTION_4_LINES;
 800196a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
	break;
 8001970:	e001      	b.n	8001976 <wrap_qspi_auto_polling+0x206>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 8001974:	e048      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}

	switch(sCommand->DdrMode)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <wrap_qspi_auto_polling+0x214>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d003      	beq.n	800198a <wrap_qspi_auto_polling+0x21a>
 8001982:	e006      	b.n	8001992 <wrap_qspi_auto_polling+0x222>
	{
	case TS_QSPI_DDR_MODE_DISABLE:scommand.DdrMode=QSPI_DDR_MODE_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	65bb      	str	r3, [r7, #88]	; 0x58
	break;
 8001988:	e005      	b.n	8001996 <wrap_qspi_auto_polling+0x226>
	case TS_QSPI_DDR_MODE_ENABLE:scommand.DdrMode=QSPI_DDR_MODE_ENABLE;
 800198a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800198e:	65bb      	str	r3, [r7, #88]	; 0x58
	break;
 8001990:	e001      	b.n	8001996 <wrap_qspi_auto_polling+0x226>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 8001994:	e038      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}

	switch (sCommand->DdrHoldHalfCycle)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <wrap_qspi_auto_polling+0x234>
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d003      	beq.n	80019aa <wrap_qspi_auto_polling+0x23a>
 80019a2:	e006      	b.n	80019b2 <wrap_qspi_auto_polling+0x242>
	{
	case TS_QSPI_DDR_HHC_ANALOG_DELAY:scommand.DdrHoldHalfCycle=QSPI_DDR_HHC_ANALOG_DELAY;
 80019a4:	2300      	movs	r3, #0
 80019a6:	65fb      	str	r3, [r7, #92]	; 0x5c
	break;
 80019a8:	e005      	b.n	80019b6 <wrap_qspi_auto_polling+0x246>
	case TS_QSPI_DDR_HHC_HALF_CLK_DELAY:scommand.DdrHoldHalfCycle=QSPI_DDR_HHC_HALF_CLK_DELAY;
 80019aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ae:	65fb      	str	r3, [r7, #92]	; 0x5c
	break;
 80019b0:	e001      	b.n	80019b6 <wrap_qspi_auto_polling+0x246>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 80019b4:	e028      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}
	switch(sCommand->SIOOMode)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <wrap_qspi_auto_polling+0x254>
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d003      	beq.n	80019ca <wrap_qspi_auto_polling+0x25a>
 80019c2:	e006      	b.n	80019d2 <wrap_qspi_auto_polling+0x262>
	{
	case TS_QSPI_SIOO_INST_EVERY_CMD:scommand.SIOOMode=QSPI_SIOO_INST_EVERY_CMD;
 80019c4:	2300      	movs	r3, #0
 80019c6:	663b      	str	r3, [r7, #96]	; 0x60
	break;
 80019c8:	e005      	b.n	80019d6 <wrap_qspi_auto_polling+0x266>
	case TS_QSPI_SIOO_INST_ONLY_FIRST_CMD:scommand.SIOOMode=QSPI_SIOO_INST_ONLY_FIRST_CMD;
 80019ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019ce:	663b      	str	r3, [r7, #96]	; 0x60
	break;
 80019d0:	e001      	b.n	80019d6 <wrap_qspi_auto_polling+0x266>
	default:return ERR_PCOM_QSPI_STRUCT_FAIL;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <wrap_qspi_auto_polling+0x2a0>)
 80019d4:	e018      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}


	qspi_status_match =NOT_MATCH;
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <wrap_qspi_auto_polling+0x2a4>)
 80019d8:	2203      	movs	r2, #3
 80019da:	701a      	strb	r2, [r3, #0]
	if(HAL_QSPI_AutoPolling_IT(&hqspi,&scommand,&sautopol)!=HAL_OK)
 80019dc:	f107 0214 	add.w	r2, r7, #20
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	4619      	mov	r1, r3
 80019e6:	480c      	ldr	r0, [pc, #48]	; (8001a18 <wrap_qspi_auto_polling+0x2a8>)
 80019e8:	f001 fc22 	bl	8003230 <HAL_QSPI_AutoPolling_IT>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <wrap_qspi_auto_polling+0x286>
	{
		return ERR_PCOM_QSPI_IT_AUTOPOL_FAIL;
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <wrap_qspi_auto_polling+0x2ac>)
 80019f4:	e008      	b.n	8001a08 <wrap_qspi_auto_polling+0x298>
	}
	else
	{
	while(qspi_status_match !=MATCH);
 80019f6:	bf00      	nop
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <wrap_qspi_auto_polling+0x2a4>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d1fa      	bne.n	80019f8 <wrap_qspi_auto_polling+0x288>
	err_code = ERR_NO_ERROR;
 8001a02:	2300      	movs	r3, #0
 8001a04:	667b      	str	r3, [r7, #100]	; 0x64

	}
	return err_code;
 8001a06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3768      	adds	r7, #104	; 0x68
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	00012022 	.word	0x00012022
 8001a14:	20000028 	.word	0x20000028
 8001a18:	20000158 	.word	0x20000158
 8001a1c:	00012023 	.word	0x00012023

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_Init+0x40>)
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_Init+0x40>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a30:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <HAL_Init+0x40>)
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_Init+0x40>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_Init+0x40>)
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_Init+0x40>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 f94b 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff f8d4 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f963 	bl	8001d4e <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 f92b 	bl	8001cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000244 	.word	0x20000244

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000244 	.word	0x20000244

08001b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff ffee 	bl	8001aec <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d005      	beq.n	8001b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_Delay+0x40>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b2a:	bf00      	nop
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad2      	subs	r2, r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d3f7      	bcc.n	8001b2c <HAL_Delay+0x28>
  {
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000008 	.word	0x20000008

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	4909      	ldr	r1, [pc, #36]	; (8001be4 <__NVIC_EnableIRQ+0x38>)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	f002 021f 	and.w	r2, r2, #31
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	490d      	ldr	r1, [pc, #52]	; (8001c34 <__NVIC_SetPriority+0x4c>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	4909      	ldr	r1, [pc, #36]	; (8001c38 <__NVIC_SetPriority+0x50>)
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	2201      	movs	r2, #1
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c82:	2101      	movs	r1, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	1e59      	subs	r1, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	4313      	orrs	r3, r2
         );
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff90 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff2b 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff40 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff90 	bl	8001c3c <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5f 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff33 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa2 	bl	8001ca0 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff feba 	bl	8001aec <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e099      	b.n	8001eb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da4:	e00f      	b.n	8001dc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001da6:	f7ff fea1 	bl	8001aec <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d908      	bls.n	8001dc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e078      	b.n	8001eb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e8      	bne.n	8001da6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <HAL_DMA_Init+0x158>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d107      	bne.n	8001e30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f023 0307 	bic.w	r3, r3, #7
 8001e46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d117      	bne.n	8001e8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fa9d 	bl	80023ac <DMA_CheckFifoParam>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2240      	movs	r2, #64	; 0x40
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e86:	2301      	movs	r3, #1
 8001e88:	e016      	b.n	8001eb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fa54 	bl	8002340 <DMA_CalcBaseAndBitshift>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea0:	223f      	movs	r2, #63	; 0x3f
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	f010803f 	.word	0xf010803f

08001ec4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_DMA_Start_IT+0x26>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e040      	b.n	8001f6c <HAL_DMA_Start_IT+0xa8>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d12f      	bne.n	8001f5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2202      	movs	r2, #2
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f9e6 	bl	80022e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	223f      	movs	r2, #63	; 0x3f
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	f042 0216 	orr.w	r2, r2, #22
 8001f32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	f042 0208 	orr.w	r2, r2, #8
 8001f4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e005      	b.n	8001f6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
 8001f68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d004      	beq.n	8001f92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00c      	b.n	8001fac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2205      	movs	r2, #5
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fc4:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_DMA_IRQHandler+0x258>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a92      	ldr	r2, [pc, #584]	; (8002214 <HAL_DMA_IRQHandler+0x25c>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0a9b      	lsrs	r3, r3, #10
 8001fd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01a      	beq.n	8002024 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d013      	beq.n	8002024 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	f022 0204 	bic.w	r2, r2, #4
 800200a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	2208      	movs	r2, #8
 8002012:	409a      	lsls	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	2201      	movs	r2, #1
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d012      	beq.n	800205a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002046:	2201      	movs	r2, #1
 8002048:	409a      	lsls	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0202 	orr.w	r2, r3, #2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	2204      	movs	r2, #4
 8002060:	409a      	lsls	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d012      	beq.n	8002090 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00b      	beq.n	8002090 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	2204      	movs	r2, #4
 800207e:	409a      	lsls	r2, r3
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002088:	f043 0204 	orr.w	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002094:	2210      	movs	r2, #16
 8002096:	409a      	lsls	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d043      	beq.n	8002128 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d03c      	beq.n	8002128 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b2:	2210      	movs	r2, #16
 80020b4:	409a      	lsls	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d018      	beq.n	80020fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d108      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d024      	beq.n	8002128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
 80020e6:	e01f      	b.n	8002128 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01b      	beq.n	8002128 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
 80020f8:	e016      	b.n	8002128 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	f022 0208 	bic.w	r2, r2, #8
 8002116:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212c:	2220      	movs	r2, #32
 800212e:	409a      	lsls	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 808e 	beq.w	8002256 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8086 	beq.w	8002256 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214e:	2220      	movs	r2, #32
 8002150:	409a      	lsls	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b05      	cmp	r3, #5
 8002160:	d136      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f022 0216 	bic.w	r2, r2, #22
 8002170:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	6952      	ldr	r2, [r2, #20]
 800217c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002180:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d103      	bne.n	8002192 <HAL_DMA_IRQHandler+0x1da>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	f022 0208 	bic.w	r2, r2, #8
 80021a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	223f      	movs	r2, #63	; 0x3f
 80021a8:	409a      	lsls	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d07d      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	4798      	blx	r3
        }
        return;
 80021ce:	e078      	b.n	80022c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d01c      	beq.n	8002218 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d108      	bne.n	80021fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d030      	beq.n	8002256 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
 80021fc:	e02b      	b.n	8002256 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d027      	beq.n	8002256 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	4798      	blx	r3
 800220e:	e022      	b.n	8002256 <HAL_DMA_IRQHandler+0x29e>
 8002210:	20000000 	.word	0x20000000
 8002214:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	f022 0210 	bic.w	r2, r2, #16
 8002234:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	2b00      	cmp	r3, #0
 800225c:	d032      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d022      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2205      	movs	r2, #5
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6812      	ldr	r2, [r2, #0]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3301      	adds	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4293      	cmp	r3, r2
 800228c:	d807      	bhi.n	800229e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f2      	bne.n	8002282 <HAL_DMA_IRQHandler+0x2ca>
 800229c:	e000      	b.n	80022a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800229e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
 80022c0:	e000      	b.n	80022c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022c2:	bf00      	nop
    }
  }
}
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop

080022cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002300:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b40      	cmp	r3, #64	; 0x40
 8002310:	d108      	bne.n	8002324 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002322:	e007      	b.n	8002334 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	60da      	str	r2, [r3, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3b10      	subs	r3, #16
 8002350:	4a14      	ldr	r2, [pc, #80]	; (80023a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800235a:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <DMA_CalcBaseAndBitshift+0x68>)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4413      	add	r3, r2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d909      	bls.n	8002382 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	1d1a      	adds	r2, r3, #4
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	659a      	str	r2, [r3, #88]	; 0x58
 8002380:	e007      	b.n	8002392 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	aaaaaaab 	.word	0xaaaaaaab
 80023a8:	080050c0 	.word	0x080050c0

080023ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d11f      	bne.n	8002406 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d855      	bhi.n	8002478 <DMA_CheckFifoParam+0xcc>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <DMA_CheckFifoParam+0x28>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	080023e5 	.word	0x080023e5
 80023d8:	080023f7 	.word	0x080023f7
 80023dc:	080023e5 	.word	0x080023e5
 80023e0:	08002479 	.word	0x08002479
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d045      	beq.n	800247c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f4:	e042      	b.n	800247c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023fe:	d13f      	bne.n	8002480 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002404:	e03c      	b.n	8002480 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800240e:	d121      	bne.n	8002454 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d836      	bhi.n	8002484 <DMA_CheckFifoParam+0xd8>
 8002416:	a201      	add	r2, pc, #4	; (adr r2, 800241c <DMA_CheckFifoParam+0x70>)
 8002418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241c:	0800242d 	.word	0x0800242d
 8002420:	08002433 	.word	0x08002433
 8002424:	0800242d 	.word	0x0800242d
 8002428:	08002445 	.word	0x08002445
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      break;
 8002430:	e02f      	b.n	8002492 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d024      	beq.n	8002488 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002442:	e021      	b.n	8002488 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800244c:	d11e      	bne.n	800248c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002452:	e01b      	b.n	800248c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d902      	bls.n	8002460 <DMA_CheckFifoParam+0xb4>
 800245a:	2b03      	cmp	r3, #3
 800245c:	d003      	beq.n	8002466 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800245e:	e018      	b.n	8002492 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      break;
 8002464:	e015      	b.n	8002492 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00e      	beq.n	8002490 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      break;
 8002476:	e00b      	b.n	8002490 <DMA_CheckFifoParam+0xe4>
      break;
 8002478:	bf00      	nop
 800247a:	e00a      	b.n	8002492 <DMA_CheckFifoParam+0xe6>
      break;
 800247c:	bf00      	nop
 800247e:	e008      	b.n	8002492 <DMA_CheckFifoParam+0xe6>
      break;
 8002480:	bf00      	nop
 8002482:	e006      	b.n	8002492 <DMA_CheckFifoParam+0xe6>
      break;
 8002484:	bf00      	nop
 8002486:	e004      	b.n	8002492 <DMA_CheckFifoParam+0xe6>
      break;
 8002488:	bf00      	nop
 800248a:	e002      	b.n	8002492 <DMA_CheckFifoParam+0xe6>
      break;   
 800248c:	bf00      	nop
 800248e:	e000      	b.n	8002492 <DMA_CheckFifoParam+0xe6>
      break;
 8002490:	bf00      	nop
    }
  } 
  
  return status; 
 8002492:	7bfb      	ldrb	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e165      	b.n	8002788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	f040 8154 	bne.w	8002782 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d00b      	beq.n	80024fa <HAL_GPIO_Init+0x5a>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ee:	2b11      	cmp	r3, #17
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b12      	cmp	r3, #18
 80024f8:	d130      	bne.n	800255c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	2203      	movs	r2, #3
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 0201 	and.w	r2, r3, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0xfc>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b12      	cmp	r3, #18
 800259a:	d123      	bne.n	80025e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	220f      	movs	r2, #15
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	69b9      	ldr	r1, [r7, #24]
 80025e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80ae 	beq.w	8002782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4a5c      	ldr	r2, [pc, #368]	; (800279c <HAL_GPIO_Init+0x2fc>)
 800262c:	4b5b      	ldr	r3, [pc, #364]	; (800279c <HAL_GPIO_Init+0x2fc>)
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b59      	ldr	r3, [pc, #356]	; (800279c <HAL_GPIO_Init+0x2fc>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002642:	4a57      	ldr	r2, [pc, #348]	; (80027a0 <HAL_GPIO_Init+0x300>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_GPIO_Init+0x304>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d025      	beq.n	80026ba <HAL_GPIO_Init+0x21a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_GPIO_Init+0x308>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01f      	beq.n	80026b6 <HAL_GPIO_Init+0x216>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_GPIO_Init+0x30c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d019      	beq.n	80026b2 <HAL_GPIO_Init+0x212>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_GPIO_Init+0x310>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x20e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4a      	ldr	r2, [pc, #296]	; (80027b4 <HAL_GPIO_Init+0x314>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x20a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a49      	ldr	r2, [pc, #292]	; (80027b8 <HAL_GPIO_Init+0x318>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x206>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a48      	ldr	r2, [pc, #288]	; (80027bc <HAL_GPIO_Init+0x31c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x202>
 800269e:	2306      	movs	r3, #6
 80026a0:	e00c      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026a2:	2307      	movs	r3, #7
 80026a4:	e00a      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026a6:	2305      	movs	r3, #5
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x21c>
 80026ba:	2300      	movs	r3, #0
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026cc:	4934      	ldr	r1, [pc, #208]	; (80027a0 <HAL_GPIO_Init+0x300>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026da:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <HAL_GPIO_Init+0x320>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026fe:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <HAL_GPIO_Init+0x320>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_GPIO_Init+0x320>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002728:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <HAL_GPIO_Init+0x320>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_GPIO_Init+0x320>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002752:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <HAL_GPIO_Init+0x320>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_GPIO_Init+0x320>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800277c:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_GPIO_Init+0x320>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	f67f ae96 	bls.w	80024bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002790:	bf00      	nop
 8002792:	3724      	adds	r7, #36	; 0x24
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40023800 	.word	0x40023800
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40021400 	.word	0x40021400
 80027bc:	40021800 	.word	0x40021800
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
 80027d0:	4613      	mov	r3, r2
 80027d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e0:	e003      	b.n	80027ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	041a      	lsls	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	619a      	str	r2, [r3, #24]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695a      	ldr	r2, [r3, #20]
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	401a      	ands	r2, r3
 800280a:	887b      	ldrh	r3, [r7, #2]
 800280c:	429a      	cmp	r2, r3
 800280e:	d104      	bne.n	800281a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	041a      	lsls	r2, r3, #16
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002818:	e002      	b.n	8002820 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	619a      	str	r2, [r3, #24]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	4a20      	ldr	r2, [pc, #128]	; (80028bc <HAL_PWREx_EnableOverDrive+0x90>)
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_PWREx_EnableOverDrive+0x90>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_PWREx_EnableOverDrive+0x90>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	603b      	str	r3, [r7, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002858:	f7ff f948 	bl	8001aec <HAL_GetTick>
 800285c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800285e:	e009      	b.n	8002874 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002860:	f7ff f944 	bl	8001aec <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800286e:	d901      	bls.n	8002874 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e01f      	b.n	80028b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d1ee      	bne.n	8002860 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002888:	f7ff f930 	bl	8001aec <HAL_GetTick>
 800288c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800288e:	e009      	b.n	80028a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002890:	f7ff f92c 	bl	8001aec <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800289e:	d901      	bls.n	80028a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e007      	b.n	80028b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028b0:	d1ee      	bne.n	8002890 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	420e0040 	.word	0x420e0040
 80028c4:	40007000 	.word	0x40007000
 80028c8:	420e0044 	.word	0x420e0044

080028cc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff f90a 	bl	8001aec <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e069      	b.n	80029b8 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7fe f8bd 	bl	8000a78 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80028fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fd9a 	bl	800343c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	f422 51f8 	bic.w	r1, r2, #7936	; 0x1f00
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6892      	ldr	r2, [r2, #8]
 800291a:	3a01      	subs	r2, #1
 800291c:	0212      	lsls	r2, r2, #8
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	2120      	movs	r1, #32
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fe39 	bl	80035a6 <QSPI_WaitFlagStateUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002938:	7afb      	ldrb	r3, [r7, #11]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d137      	bne.n	80029ae <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800294c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	6849      	ldr	r1, [r1, #4]
 8002954:	0608      	lsls	r0, r1, #24
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	68c9      	ldr	r1, [r1, #12]
 800295a:	4308      	orrs	r0, r1
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	69c9      	ldr	r1, [r1, #28]
 8002960:	4308      	orrs	r0, r1
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	6a09      	ldr	r1, [r1, #32]
 8002966:	4301      	orrs	r1, r0
 8002968:	430b      	orrs	r3, r1
 800296a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_QSPI_Init+0xf4>)
 8002978:	400b      	ands	r3, r1
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	6909      	ldr	r1, [r1, #16]
 800297e:	0408      	lsls	r0, r1, #16
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	6949      	ldr	r1, [r1, #20]
 8002984:	4308      	orrs	r0, r1
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	6989      	ldr	r1, [r1, #24]
 800298a:	4301      	orrs	r1, r0
 800298c:	430b      	orrs	r3, r1
 800298e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80029b6:	7afb      	ldrb	r3, [r7, #11]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	ffe0f8fe 	.word	0xffe0f8fe

080029c4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d064      	beq.n	8002ab0 <HAL_QSPI_IRQHandler+0xec>
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d05f      	beq.n	8002ab0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3320      	adds	r3, #32
 80029f6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b12      	cmp	r3, #18
 8002a02:	d125      	bne.n	8002a50 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8002a04:	e01c      	b.n	8002a40 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00f      	beq.n	8002a2e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a26:	1e5a      	subs	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a2c:	e008      	b.n	8002a40 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a3c:	601a      	str	r2, [r3, #0]
          break;
 8002a3e:	e033      	b.n	8002aa8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1db      	bne.n	8002a06 <HAL_QSPI_IRQHandler+0x42>
 8002a4e:	e02b      	b.n	8002aa8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b22      	cmp	r3, #34	; 0x22
 8002a5a:	d125      	bne.n	8002aa8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8002a5c:	e01d      	b.n	8002a9a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d010      	beq.n	8002a88 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	1e5a      	subs	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
 8002a86:	e008      	b.n	8002a9a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a96:	601a      	str	r2, [r3, #0]
          break;
 8002a98:	e006      	b.n	8002aa8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1da      	bne.n	8002a5e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fc57 	bl	800335c <HAL_QSPI_FifoThresholdCallback>
 8002aae:	e142      	b.n	8002d36 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80b6 	beq.w	8002c28 <HAL_QSPI_IRQHandler+0x264>
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80b0 	beq.w	8002c28 <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2202      	movs	r2, #2
 8002ace:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8002ade:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b12      	cmp	r3, #18
 8002aea:	d123      	bne.n	8002b34 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d011      	beq.n	8002b1e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	f022 0204 	bic.w	r2, r2, #4
 8002b08:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fc30 	bl	8003384 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fd fd29 	bl	8000584 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002b32:	e0fd      	b.n	8002d30 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b22      	cmp	r3, #34	; 0x22
 8002b3e:	d146      	bne.n	8002bce <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d012      	beq.n	8002b74 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	f022 0204 	bic.w	r2, r2, #4
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b68:	6812      	ldr	r2, [r2, #0]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e021      	b.n	8002bb8 <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3320      	adds	r3, #32
 8002b7a:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8002b7c:	e013      	b.n	8002ba6 <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d017      	beq.n	8002bb6 <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	1e5a      	subs	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1e4      	bne.n	8002b7e <HAL_QSPI_IRQHandler+0x1ba>
 8002bb4:	e000      	b.n	8002bb8 <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8002bb6:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fbe3 	bl	8003384 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fd fcbc 	bl	8000544 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002bcc:	e0b0      	b.n	8002d30 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d107      	bne.n	8002bea <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd fcde 	bl	80005a4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002be8:	e0a2      	b.n	8002d30 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	f040 809c 	bne.w	8002d30 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	6952      	ldr	r2, [r2, #20]
 8002c02:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002c06:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fb81 	bl	8003320 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002c1e:	e087      	b.n	8002d30 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fd fc9f 	bl	8000564 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002c26:	e083      	b.n	8002d30 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01f      	beq.n	8002c72 <HAL_QSPI_IRQHandler+0x2ae>
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01a      	beq.n	8002c72 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2208      	movs	r2, #8
 8002c42:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002c60:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd fcaa 	bl	80005c4 <HAL_QSPI_StatusMatchCallback>
 8002c70:	e061      	b.n	8002d36 <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d047      	beq.n	8002d0c <HAL_QSPI_IRQHandler+0x348>
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d042      	beq.n	8002d0c <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002c9c:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f043 0202 	orr.w	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d021      	beq.n	8002cfc <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	f022 0204 	bic.w	r2, r2, #4
 8002cc6:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ccc:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_QSPI_IRQHandler+0x37c>)
 8002cce:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f94d 	bl	8001f74 <HAL_DMA_Abort_IT>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d029      	beq.n	8002d34 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7fd fc35 	bl	8000564 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002cfa:	e01b      	b.n	8002d34 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7fd fc2d 	bl	8000564 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002d0a:	e013      	b.n	8002d34 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00f      	beq.n	8002d36 <HAL_QSPI_IRQHandler+0x372>
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2210      	movs	r2, #16
 8002d26:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fb21 	bl	8003370 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8002d2e:	e002      	b.n	8002d36 <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8002d30:	bf00      	nop
 8002d32:	e000      	b.n	8002d36 <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8002d34:	bf00      	nop
}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	08003541 	.word	0x08003541

08002d44 <HAL_QSPI_Command_IT>:
  * @param cmd : structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d4e:	f7fe fecd 	bl	8001aec <HAL_GetTick>
 8002d52:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_QSPI_Command_IT+0x20>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e051      	b.n	8002e08 <HAL_QSPI_Command_IT+0xc4>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d140      	bne.n	8002dfa <HAL_QSPI_Command_IT+0xb6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2120      	movs	r1, #32
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fc07 	bl	80035a6 <QSPI_WaitFlagStateUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d126      	bne.n	8002df0 <HAL_QSPI_Command_IT+0xac>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <HAL_QSPI_Command_IT+0x6e>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2203      	movs	r2, #3
 8002db0:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002db2:	2200      	movs	r2, #0
 8002db4:	6839      	ldr	r1, [r7, #0]
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fc2c 	bl	8003614 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10c      	bne.n	8002dde <HAL_QSPI_Command_IT+0x9a>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e013      	b.n	8002e06 <HAL_QSPI_Command_IT+0xc2>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dee:	e00a      	b.n	8002e06 <HAL_QSPI_Command_IT+0xc2>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df8:	e005      	b.n	8002e06 <HAL_QSPI_Command_IT+0xc2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_QSPI_Transmit_DMA>:
  * @note   If DMA peripheral access is configured as word, the number
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	3301      	adds	r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_QSPI_Transmit_DMA+0x28>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e0e3      	b.n	8003000 <HAL_QSPI_Transmit_DMA+0x1f0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	f040 80d2 	bne.w	8002ff2 <HAL_QSPI_Transmit_DMA+0x1e2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80be 	beq.w	8002fd8 <HAL_QSPI_Transmit_DMA+0x1c8>
    {
      /* Configure counters of the handle */
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <HAL_QSPI_Transmit_DMA+0x5e>
      {
        hqspi->TxXferCount = data_size;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e6c:	e044      	b.n	8002ef8 <HAL_QSPI_Transmit_DMA+0xe8>
      }
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_HALFWORD)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e78:	d11c      	bne.n	8002eb4 <HAL_QSPI_Transmit_DMA+0xa4>
      {
        if (((data_size % 2U) != 0U) || ((hqspi->Init.FifoThreshold % 2U) != 0U))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d105      	bne.n	8002e90 <HAL_QSPI_Transmit_DMA+0x80>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00c      	beq.n	8002eaa <HAL_QSPI_Transmit_DMA+0x9a>
        {
          /* The number of data or the fifo threshold is not aligned on halfword
          => no transfer possible with DMA peripheral access configured as halfword */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f043 0208 	orr.w	r2, r3, #8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea8:	e026      	b.n	8002ef8 <HAL_QSPI_Transmit_DMA+0xe8>
        }
        else
        {
          hqspi->TxXferCount = (data_size >> 1U);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	085a      	lsrs	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eb2:	e021      	b.n	8002ef8 <HAL_QSPI_Transmit_DMA+0xe8>
        }
      }
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_WORD)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebe:	d11b      	bne.n	8002ef8 <HAL_QSPI_Transmit_DMA+0xe8>
      {
        if (((data_size % 4U) != 0U) || ((hqspi->Init.FifoThreshold % 4U) != 0U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_QSPI_Transmit_DMA+0xc6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_QSPI_Transmit_DMA+0xe0>
        {
          /* The number of data or the fifo threshold is not aligned on word
          => no transfer possible with DMA peripheral access configured as word */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f043 0208 	orr.w	r2, r3, #8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eee:	e003      	b.n	8002ef8 <HAL_QSPI_Transmit_DMA+0xe8>
        }
        else
        {
          hqspi->TxXferCount = (data_size >> 2U);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	089a      	lsrs	r2, r3, #2
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c
      else
      {
        /* Nothing to do */
      }

      if (status == HAL_OK)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d17f      	bne.n	8002ffe <HAL_QSPI_Transmit_DMA+0x1ee>
      {
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2212      	movs	r2, #18
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	6952      	ldr	r2, [r2, #20]
 8002f26:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002f2a:	615a      	str	r2, [r3, #20]

        /* Set the QSPI DMA transfer complete callback */
        hqspi->hdma->XferCpltCallback = QSPI_DMATxCplt;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	4a35      	ldr	r2, [pc, #212]	; (8003008 <HAL_QSPI_Transmit_DMA+0x1f8>)
 8002f32:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the QSPI DMA Half transfer complete callback */
        hqspi->hdma->XferHalfCpltCallback = QSPI_DMATxHalfCplt;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	4a34      	ldr	r2, [pc, #208]	; (800300c <HAL_QSPI_Transmit_DMA+0x1fc>)
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hqspi->hdma->XferErrorCallback = QSPI_DMAError;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	4a33      	ldr	r2, [pc, #204]	; (8003010 <HAL_QSPI_Transmit_DMA+0x200>)
 8002f42:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Clear the DMA abort callback */
        hqspi->hdma->XferAbortCallback = NULL;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	2200      	movs	r2, #0
 8002f4a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Configure the direction of the DMA */
        hqspi->hdma->Init.Direction = DMA_PERIPH_TO_MEMORY;
#else
        /* Configure the direction of the DMA */
        hqspi->hdma->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	2240      	movs	r2, #64	; 0x40
 8002f52:	609a      	str	r2, [r3, #8]
#endif /* QSPI1_V2_1L */

        /* Update direction mode bit */
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Enable the QSPI transmit DMA Channel */
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize) == HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002f74:	6839      	ldr	r1, [r7, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3320      	adds	r3, #32
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	f7fe ff9f 	bl	8001ec4 <HAL_DMA_Start_IT>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d114      	bne.n	8002fb6 <HAL_QSPI_Transmit_DMA+0x1a6>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          
          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fa2:	601a      	str	r2, [r3, #0]
          
          /* Enable the DMA transfer by setting the DMAEN bit in the QSPI CR register */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	f042 0204 	orr.w	r2, r2, #4
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e023      	b.n	8002ffe <HAL_QSPI_Transmit_DMA+0x1ee>
        }
        else
        {
          status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f043 0204 	orr.w	r2, r3, #4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd6:	e012      	b.n	8002ffe <HAL_QSPI_Transmit_DMA+0x1ee>
        }
     }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	f043 0208 	orr.w	r2, r3, #8
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff0:	e005      	b.n	8002ffe <HAL_QSPI_Transmit_DMA+0x1ee>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	08003489 	.word	0x08003489
 800300c:	080034d5 	.word	0x080034d5
 8003010:	080034f1 	.word	0x080034f1

08003014 <HAL_QSPI_Receive_DMA>:
  * @note   If DMA peripheral access is configured as word, the number
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	613b      	str	r3, [r7, #16]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	3301      	adds	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_QSPI_Receive_DMA+0x30>
 8003040:	2302      	movs	r3, #2
 8003042:	e0ea      	b.n	800321a <HAL_QSPI_Receive_DMA+0x206>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	f040 80d9 	bne.w	800320c <HAL_QSPI_Receive_DMA+0x1f8>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 80c5 	beq.w	80031f2 <HAL_QSPI_Receive_DMA+0x1de>
    {
      /* Configure counters of the handle */
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d103      	bne.n	800307a <HAL_QSPI_Receive_DMA+0x66>
      {
        hqspi->RxXferCount = data_size;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
 8003078:	e044      	b.n	8003104 <HAL_QSPI_Receive_DMA+0xf0>
      }
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_HALFWORD)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003084:	d11c      	bne.n	80030c0 <HAL_QSPI_Receive_DMA+0xac>
      {
        if (((data_size % 2U) != 0U) || ((hqspi->Init.FifoThreshold % 2U) != 0U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d105      	bne.n	800309c <HAL_QSPI_Receive_DMA+0x88>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00c      	beq.n	80030b6 <HAL_QSPI_Receive_DMA+0xa2>
        {
          /* The number of data or the fifo threshold is not aligned on halfword
             => no transfer possible with DMA peripheral access configured as halfword */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	f043 0208 	orr.w	r2, r3, #8
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b4:	e026      	b.n	8003104 <HAL_QSPI_Receive_DMA+0xf0>
        }
        else
        {
          hqspi->RxXferCount = (data_size >> 1U);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	085a      	lsrs	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	639a      	str	r2, [r3, #56]	; 0x38
 80030be:	e021      	b.n	8003104 <HAL_QSPI_Receive_DMA+0xf0>
        }
      }
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_WORD)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ca:	d11b      	bne.n	8003104 <HAL_QSPI_Receive_DMA+0xf0>
      {
        if (((data_size % 4U) != 0U) || ((hqspi->Init.FifoThreshold % 4U) != 0U))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d105      	bne.n	80030e2 <HAL_QSPI_Receive_DMA+0xce>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <HAL_QSPI_Receive_DMA+0xe8>
        {
          /* The number of data or the fifo threshold is not aligned on word
             => no transfer possible with DMA peripheral access configured as word */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f043 0208 	orr.w	r2, r3, #8
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75fb      	strb	r3, [r7, #23]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030fa:	e003      	b.n	8003104 <HAL_QSPI_Receive_DMA+0xf0>
        }
        else
        {
          hqspi->RxXferCount = (data_size >> 2U);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	089a      	lsrs	r2, r3, #2
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
      else
      {
        /* Nothing to do */
      }

      if (status == HAL_OK)
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 8086 	bne.w	8003218 <HAL_QSPI_Receive_DMA+0x204>
      {
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2222      	movs	r2, #34	; 0x22
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2203      	movs	r2, #3
 800311a:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->RxXferSize = hqspi->RxXferCount;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	635a      	str	r2, [r3, #52]	; 0x34
        hqspi->pRxBuffPtr = pData;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the QSPI DMA transfer complete callback */
        hqspi->hdma->XferCpltCallback = QSPI_DMARxCplt;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	4a3d      	ldr	r2, [pc, #244]	; (8003224 <HAL_QSPI_Receive_DMA+0x210>)
 8003130:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the QSPI DMA Half transfer complete callback */
        hqspi->hdma->XferHalfCpltCallback = QSPI_DMARxHalfCplt;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <HAL_QSPI_Receive_DMA+0x214>)
 8003138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hqspi->hdma->XferErrorCallback = QSPI_DMAError;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	4a3b      	ldr	r2, [pc, #236]	; (800322c <HAL_QSPI_Receive_DMA+0x218>)
 8003140:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Clear the DMA abort callback */
        hqspi->hdma->XferAbortCallback = NULL;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	2200      	movs	r2, #0
 8003148:	651a      	str	r2, [r3, #80]	; 0x50
        /* 4 Extra words (32-bits) are needed for read operation to guarantee
        the last data is transferred from DMA FIFO to RAM memory */
        WRITE_REG(hqspi->Instance->DLR, (data_size - 1U + 16U));
#else
        /* Configure the direction of the DMA */
        hqspi->hdma->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
#endif
        /* Update direction mode bit */
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003168:	6892      	ldr	r2, [r2, #8]
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]

        /* Enable the DMA Channel */
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)&hqspi->Instance->DR, (uint32_t)pData, hqspi->RxXferSize) == HAL_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3320      	adds	r3, #32
 8003178:	4619      	mov	r1, r3
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	f7fe fea0 	bl	8001ec4 <HAL_DMA_Start_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d122      	bne.n	80031d0 <HAL_QSPI_Receive_DMA+0x1bc>
        {
          /* Configure QSPI: CCR register with functional as indirect read */
          MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	6952      	ldr	r2, [r2, #20]
 8003194:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003198:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800319c:	615a      	str	r2, [r3, #20]

          /* Start the transfer by re-writing the address in AR register */
          WRITE_REG(hqspi->Instance->AR, addr_reg);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	619a      	str	r2, [r3, #24]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          
          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031bc:	601a      	str	r2, [r3, #0]
          
          /* Enable the DMA transfer by setting the DMAEN bit in the QSPI CR register */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	f042 0204 	orr.w	r2, r2, #4
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e023      	b.n	8003218 <HAL_QSPI_Receive_DMA+0x204>
        }
        else
        {
          status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75fb      	strb	r3, [r7, #23]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f043 0204 	orr.w	r2, r3, #4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f0:	e012      	b.n	8003218 <HAL_QSPI_Receive_DMA+0x204>
        }
      }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f043 0208 	orr.w	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	75fb      	strb	r3, [r7, #23]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320a:	e005      	b.n	8003218 <HAL_QSPI_Receive_DMA+0x204>
    }
  }
  else
  {
    status = HAL_BUSY;
 800320c:	2302      	movs	r3, #2
 800320e:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003218:	7dfb      	ldrb	r3, [r7, #23]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	08003459 	.word	0x08003459
 8003228:	080034b9 	.word	0x080034b9
 800322c:	080034f1 	.word	0x080034f1

08003230 <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg : structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800323c:	f7fe fc56 	bl	8001aec <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_QSPI_AutoPolling_IT+0x22>
 800324e:	2302      	movs	r3, #2
 8003250:	e062      	b.n	8003318 <HAL_QSPI_AutoPolling_IT+0xe8>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d151      	bne.n	800330a <HAL_QSPI_AutoPolling_IT+0xda>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2242      	movs	r2, #66	; 0x42
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2200      	movs	r2, #0
 800327e:	2120      	movs	r1, #32
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f990 	bl	80035a6 <QSPI_WaitFlagStateUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800328a:	7dfb      	ldrb	r3, [r7, #23]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d137      	bne.n	8003300 <HAL_QSPI_AutoPolling_IT+0xd0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6852      	ldr	r2, [r2, #4]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6892      	ldr	r2, [r2, #8]
 80032ac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6910      	ldr	r0, [r2, #16]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6952      	ldr	r2, [r2, #20]
 80032c4:	4302      	orrs	r2, r0
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2209      	movs	r2, #9
 80032d0:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80032da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f997 	bl	8003614 <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e00a      	b.n	8003316 <HAL_QSPI_AutoPolling_IT+0xe6>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003308:	e005      	b.n	8003316 <HAL_QSPI_AutoPolling_IT+0xe6>
    }
  }
  else
  {
    status = HAL_BUSY;
 800330a:	2302      	movs	r3, #2
 800330c:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
 8003316:	7dfb      	ldrb	r3, [r7, #23]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_QSPI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxHalfCpltCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_QSPI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d046      	beq.n	800342e <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2208      	movs	r2, #8
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80033be:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d01b      	beq.n	8003406 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	f022 0204 	bic.w	r2, r2, #4
 80033dc:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <HAL_QSPI_Abort_IT+0xb4>)
 80033e4:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe fdc2 	bl	8001f74 <HAL_DMA_Abort_IT>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01b      	beq.n	800342e <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ff8e 	bl	8003320 <HAL_QSPI_AbortCpltCallback>
 8003404:	e013      	b.n	800342e <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2202      	movs	r2, #2
 800340c:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800341c:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	f042 0202 	orr.w	r2, r2, #2
 800342c:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	08003541 	.word	0x08003541

0800343c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <QSPI_DMARxCplt>:
  * @brief  DMA QSPI receive process complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	60fb      	str	r3, [r7, #12]
  hqspi->RxXferCount = 0U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800347a:	601a      	str	r2, [r3, #0]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034aa:	601a      	str	r2, [r3, #0]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <QSPI_DMARxHalfCplt>:
  * @brief  DMA QSPI receive process half complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
  hqspi->RxHalfCpltCallback(hqspi);
#else
  HAL_QSPI_RxHalfCpltCallback(hqspi);
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff ff34 	bl	8003334 <HAL_QSPI_RxHalfCpltCallback>
#endif
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <QSPI_DMATxHalfCplt>:
  * @brief  DMA QSPI transmit process half complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
  hqspi->TxHalfCpltCallback(hqspi);
#else
  HAL_QSPI_TxHalfCpltCallback(hqspi);
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff ff30 	bl	8003348 <HAL_QSPI_TxHalfCpltCallback>
#endif
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe fee4 	bl	80022cc <HAL_DMA_GetError>
 8003504:	4603      	mov	r3, r0
 8003506:	2b02      	cmp	r3, #2
 8003508:	d016      	beq.n	8003538 <QSPI_DMAError+0x48>
  {
  hqspi->RxXferCount = 0U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f043 0204 	orr.w	r2, r3, #4
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	f022 0204 	bic.w	r2, r2, #4
 8003530:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ff26 	bl	8003384 <HAL_QSPI_Abort_IT>

  }
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b08      	cmp	r3, #8
 8003564:	d114      	bne.n	8003590 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2202      	movs	r2, #2
 800356c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800357c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	f042 0202 	orr.w	r2, r2, #2
 800358c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800358e:	e006      	b.n	800359e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7fc ffe3 	bl	8000564 <HAL_QSPI_ErrorCallback>
}
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80035b6:	e01a      	b.n	80035ee <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d016      	beq.n	80035ee <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fe fa94 	bl	8001aec <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	1ad2      	subs	r2, r2, r3
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d802      	bhi.n	80035d6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2204      	movs	r2, #4
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f043 0201 	orr.w	r2, r3, #1
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e00e      	b.n	800360c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	429a      	cmp	r2, r3
 8003608:	d1d6      	bne.n	80035b8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <QSPI_Config+0x28>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800362e:	d005      	beq.n	800363c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003638:	3a01      	subs	r2, #1
 800363a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80b5 	beq.w	80037b0 <QSPI_Config+0x19c>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d05d      	beq.n	800370a <QSPI_Config+0xf6>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	6892      	ldr	r2, [r2, #8]
 8003656:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d030      	beq.n	80036c2 <QSPI_Config+0xae>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800366c:	4311      	orrs	r1, r2
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003672:	4311      	orrs	r1, r2
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003678:	4311      	orrs	r1, r2
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	6952      	ldr	r2, [r2, #20]
 800367e:	0492      	lsls	r2, r2, #18
 8003680:	4311      	orrs	r1, r2
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	6912      	ldr	r2, [r2, #16]
 8003686:	4311      	orrs	r1, r2
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	6a12      	ldr	r2, [r2, #32]
 800368c:	4311      	orrs	r1, r2
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	4311      	orrs	r1, r2
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	69d2      	ldr	r2, [r2, #28]
 8003698:	4311      	orrs	r1, r2
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	6992      	ldr	r2, [r2, #24]
 800369e:	4311      	orrs	r1, r2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	4311      	orrs	r1, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80036b2:	f000 8127 	beq.w	8003904 <QSPI_Config+0x2f0>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	6852      	ldr	r2, [r2, #4]
 80036be:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80036c0:	e120      	b.n	8003904 <QSPI_Config+0x2f0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036ce:	4311      	orrs	r1, r2
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036d4:	4311      	orrs	r1, r2
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036da:	4311      	orrs	r1, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	6952      	ldr	r2, [r2, #20]
 80036e0:	0492      	lsls	r2, r2, #18
 80036e2:	4311      	orrs	r1, r2
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	6912      	ldr	r2, [r2, #16]
 80036e8:	4311      	orrs	r1, r2
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	6a12      	ldr	r2, [r2, #32]
 80036ee:	4311      	orrs	r1, r2
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	69d2      	ldr	r2, [r2, #28]
 80036f4:	4311      	orrs	r1, r2
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	6992      	ldr	r2, [r2, #24]
 80036fa:	4311      	orrs	r1, r2
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	4311      	orrs	r1, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	430a      	orrs	r2, r1
 8003706:	615a      	str	r2, [r3, #20]
}
 8003708:	e0fc      	b.n	8003904 <QSPI_Config+0x2f0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d02d      	beq.n	800376e <QSPI_Config+0x15a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800371e:	4311      	orrs	r1, r2
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003724:	4311      	orrs	r1, r2
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800372a:	4311      	orrs	r1, r2
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	6952      	ldr	r2, [r2, #20]
 8003730:	0492      	lsls	r2, r2, #18
 8003732:	4311      	orrs	r1, r2
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	6a12      	ldr	r2, [r2, #32]
 8003738:	4311      	orrs	r1, r2
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	68d2      	ldr	r2, [r2, #12]
 800373e:	4311      	orrs	r1, r2
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	69d2      	ldr	r2, [r2, #28]
 8003744:	4311      	orrs	r1, r2
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	6992      	ldr	r2, [r2, #24]
 800374a:	4311      	orrs	r1, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	430a      	orrs	r2, r1
 8003756:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800375e:	f000 80d1 	beq.w	8003904 <QSPI_Config+0x2f0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	6852      	ldr	r2, [r2, #4]
 800376a:	619a      	str	r2, [r3, #24]
}
 800376c:	e0ca      	b.n	8003904 <QSPI_Config+0x2f0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800377a:	4311      	orrs	r1, r2
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003780:	4311      	orrs	r1, r2
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003786:	4311      	orrs	r1, r2
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	6952      	ldr	r2, [r2, #20]
 800378c:	0492      	lsls	r2, r2, #18
 800378e:	4311      	orrs	r1, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	6a12      	ldr	r2, [r2, #32]
 8003794:	4311      	orrs	r1, r2
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	69d2      	ldr	r2, [r2, #28]
 800379a:	4311      	orrs	r1, r2
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	6992      	ldr	r2, [r2, #24]
 80037a0:	4311      	orrs	r1, r2
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	615a      	str	r2, [r3, #20]
}
 80037ae:	e0a9      	b.n	8003904 <QSPI_Config+0x2f0>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d056      	beq.n	8003866 <QSPI_Config+0x252>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	6892      	ldr	r2, [r2, #8]
 80037c0:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d02c      	beq.n	8003824 <QSPI_Config+0x210>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037d6:	4311      	orrs	r1, r2
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037dc:	4311      	orrs	r1, r2
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037e2:	4311      	orrs	r1, r2
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	6952      	ldr	r2, [r2, #20]
 80037e8:	0492      	lsls	r2, r2, #18
 80037ea:	4311      	orrs	r1, r2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	6912      	ldr	r2, [r2, #16]
 80037f0:	4311      	orrs	r1, r2
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	6a12      	ldr	r2, [r2, #32]
 80037f6:	4311      	orrs	r1, r2
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	68d2      	ldr	r2, [r2, #12]
 80037fc:	4311      	orrs	r1, r2
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	69d2      	ldr	r2, [r2, #28]
 8003802:	4311      	orrs	r1, r2
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	6992      	ldr	r2, [r2, #24]
 8003808:	4311      	orrs	r1, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	430a      	orrs	r2, r1
 800380e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003816:	d075      	beq.n	8003904 <QSPI_Config+0x2f0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	6852      	ldr	r2, [r2, #4]
 8003820:	619a      	str	r2, [r3, #24]
}
 8003822:	e06f      	b.n	8003904 <QSPI_Config+0x2f0>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003830:	4311      	orrs	r1, r2
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003836:	4311      	orrs	r1, r2
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800383c:	4311      	orrs	r1, r2
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	6952      	ldr	r2, [r2, #20]
 8003842:	0492      	lsls	r2, r2, #18
 8003844:	4311      	orrs	r1, r2
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	6912      	ldr	r2, [r2, #16]
 800384a:	4311      	orrs	r1, r2
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	6a12      	ldr	r2, [r2, #32]
 8003850:	4311      	orrs	r1, r2
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	69d2      	ldr	r2, [r2, #28]
 8003856:	4311      	orrs	r1, r2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	6992      	ldr	r2, [r2, #24]
 800385c:	4311      	orrs	r1, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	430a      	orrs	r2, r1
 8003862:	615a      	str	r2, [r3, #20]
}
 8003864:	e04e      	b.n	8003904 <QSPI_Config+0x2f0>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d029      	beq.n	80038c2 <QSPI_Config+0x2ae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800387a:	4311      	orrs	r1, r2
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003880:	4311      	orrs	r1, r2
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003886:	4311      	orrs	r1, r2
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	6952      	ldr	r2, [r2, #20]
 800388c:	0492      	lsls	r2, r2, #18
 800388e:	4311      	orrs	r1, r2
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	6a12      	ldr	r2, [r2, #32]
 8003894:	4311      	orrs	r1, r2
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	68d2      	ldr	r2, [r2, #12]
 800389a:	4311      	orrs	r1, r2
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	69d2      	ldr	r2, [r2, #28]
 80038a0:	4311      	orrs	r1, r2
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	6992      	ldr	r2, [r2, #24]
 80038a6:	4311      	orrs	r1, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80038b4:	d026      	beq.n	8003904 <QSPI_Config+0x2f0>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	6852      	ldr	r2, [r2, #4]
 80038be:	619a      	str	r2, [r3, #24]
}
 80038c0:	e020      	b.n	8003904 <QSPI_Config+0x2f0>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01c      	beq.n	8003904 <QSPI_Config+0x2f0>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038d6:	4311      	orrs	r1, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038dc:	4311      	orrs	r1, r2
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038e2:	4311      	orrs	r1, r2
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	6952      	ldr	r2, [r2, #20]
 80038e8:	0492      	lsls	r2, r2, #18
 80038ea:	4311      	orrs	r1, r2
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	6a12      	ldr	r2, [r2, #32]
 80038f0:	4311      	orrs	r1, r2
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	69d2      	ldr	r2, [r2, #28]
 80038f6:	4311      	orrs	r1, r2
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	6992      	ldr	r2, [r2, #24]
 80038fc:	4311      	orrs	r1, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	430a      	orrs	r2, r1
 8003902:	615a      	str	r2, [r3, #20]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0cc      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 020f 	and.w	r2, r3, #15
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d20c      	bcs.n	800394c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 020f 	and.w	r2, r3, #15
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b8      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003964:	4a59      	ldr	r2, [pc, #356]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	4b59      	ldr	r3, [pc, #356]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800396e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800397c:	4a53      	ldr	r2, [pc, #332]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4950      	ldr	r1, [pc, #320]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	4b50      	ldr	r3, [pc, #320]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d044      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d119      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e06f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b3b      	ldr	r3, [pc, #236]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e067      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4937      	ldr	r1, [pc, #220]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 0203 	bic.w	r2, r3, #3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fe f874 	bl	8001aec <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fe f870 	bl	8001aec <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e04f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 020f 	and.w	r2, r3, #15
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d90c      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 020f 	and.w	r2, r3, #15
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e032      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a64:	4919      	ldr	r1, [pc, #100]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a82:	4912      	ldr	r1, [pc, #72]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	4b11      	ldr	r3, [pc, #68]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a96:	f000 f855 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	5cd3      	ldrb	r3, [r2, r3]
 8003aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd ffd4 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023c00 	.word	0x40023c00
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	080050a8 	.word	0x080050a8
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000004 	.word	0x20000004

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000000 	.word	0x20000000

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af8:	f7ff fff0 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003afc:	4601      	mov	r1, r0
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	0a9b      	lsrs	r3, r3, #10
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4a03      	ldr	r2, [pc, #12]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	080050b8 	.word	0x080050b8

08003b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b20:	f7ff ffdc 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b24:	4601      	mov	r1, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0b5b      	lsrs	r3, r3, #13
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4a03      	ldr	r2, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	080050b8 	.word	0x080050b8

08003b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b48:	b091      	sub	sp, #68	; 0x44
 8003b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t pllr = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b60:	4b9e      	ldr	r3, [pc, #632]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b0c      	cmp	r3, #12
 8003b6a:	f200 812d 	bhi.w	8003dc8 <HAL_RCC_GetSysClockFreq+0x284>
 8003b6e:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <HAL_RCC_GetSysClockFreq+0x30>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003dc9 	.word	0x08003dc9
 8003b7c:	08003dc9 	.word	0x08003dc9
 8003b80:	08003dc9 	.word	0x08003dc9
 8003b84:	08003baf 	.word	0x08003baf
 8003b88:	08003dc9 	.word	0x08003dc9
 8003b8c:	08003dc9 	.word	0x08003dc9
 8003b90:	08003dc9 	.word	0x08003dc9
 8003b94:	08003bb5 	.word	0x08003bb5
 8003b98:	08003dc9 	.word	0x08003dc9
 8003b9c:	08003dc9 	.word	0x08003dc9
 8003ba0:	08003dc9 	.word	0x08003dc9
 8003ba4:	08003ccb 	.word	0x08003ccb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b8d      	ldr	r3, [pc, #564]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003baa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bac:	e10f      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x28a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bae:	4b8d      	ldr	r3, [pc, #564]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003bb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bb2:	e10c      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x28a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb4:	4b89      	ldr	r3, [pc, #548]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bbe:	4b87      	ldr	r3, [pc, #540]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d023      	beq.n	8003c12 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bca:	4b84      	ldr	r3, [pc, #528]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	099b      	lsrs	r3, r3, #6
 8003bd0:	f04f 0400 	mov.w	r4, #0
 8003bd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	ea03 0301 	and.w	r3, r3, r1
 8003be0:	ea04 0402 	and.w	r4, r4, r2
 8003be4:	4a7f      	ldr	r2, [pc, #508]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003be6:	fb02 f104 	mul.w	r1, r2, r4
 8003bea:	2200      	movs	r2, #0
 8003bec:	fb02 f203 	mul.w	r2, r2, r3
 8003bf0:	440a      	add	r2, r1
 8003bf2:	497c      	ldr	r1, [pc, #496]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003bf4:	fba3 0101 	umull	r0, r1, r3, r1
 8003bf8:	1853      	adds	r3, r2, r1
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfe:	f04f 0400 	mov.w	r4, #0
 8003c02:	461a      	mov	r2, r3
 8003c04:	4623      	mov	r3, r4
 8003c06:	f7fc fb05 	bl	8000214 <__aeabi_uldivmod>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c10:	e04d      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x16a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c12:	4b72      	ldr	r3, [pc, #456]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	f04f 0400 	mov.w	r4, #0
 8003c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	ea01 0103 	and.w	r1, r1, r3
 8003c28:	ea02 0204 	and.w	r2, r2, r4
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4614      	mov	r4, r2
 8003c30:	0160      	lsls	r0, r4, #5
 8003c32:	6278      	str	r0, [r7, #36]	; 0x24
 8003c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c36:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003c3a:	6278      	str	r0, [r7, #36]	; 0x24
 8003c3c:	015b      	lsls	r3, r3, #5
 8003c3e:	623b      	str	r3, [r7, #32]
 8003c40:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003c44:	1a5b      	subs	r3, r3, r1
 8003c46:	eb64 0402 	sbc.w	r4, r4, r2
 8003c4a:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003c4e:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003c52:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003c56:	ebb8 0803 	subs.w	r8, r8, r3
 8003c5a:	eb69 0904 	sbc.w	r9, r9, r4
 8003c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003c76:	eb18 0801 	adds.w	r8, r8, r1
 8003c7a:	eb49 0902 	adc.w	r9, r9, r2
 8003c7e:	ea4f 2389 	mov.w	r3, r9, lsl #10
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	ea43 5398 	orr.w	r3, r3, r8, lsr #22
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	ea4f 2388 	mov.w	r3, r8, lsl #10
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003c96:	4640      	mov	r0, r8
 8003c98:	4649      	mov	r1, r9
 8003c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9c:	f04f 0400 	mov.w	r4, #0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	f7fc fab6 	bl	8000214 <__aeabi_uldivmod>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	460c      	mov	r4, r1
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cae:	4b4b      	ldr	r3, [pc, #300]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cc8:	e081      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x28a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cca:	4b44      	ldr	r3, [pc, #272]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd4:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d023      	beq.n	8003d28 <HAL_RCC_GetSysClockFreq+0x1e4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce0:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	099b      	lsrs	r3, r3, #6
 8003ce6:	f04f 0400 	mov.w	r4, #0
 8003cea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	ea03 0301 	and.w	r3, r3, r1
 8003cf6:	ea04 0402 	and.w	r4, r4, r2
 8003cfa:	4a3a      	ldr	r2, [pc, #232]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003cfc:	fb02 f104 	mul.w	r1, r2, r4
 8003d00:	2200      	movs	r2, #0
 8003d02:	fb02 f203 	mul.w	r2, r2, r3
 8003d06:	440a      	add	r2, r1
 8003d08:	4936      	ldr	r1, [pc, #216]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003d0a:	fba3 0101 	umull	r0, r1, r3, r1
 8003d0e:	1853      	adds	r3, r2, r1
 8003d10:	4619      	mov	r1, r3
 8003d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d14:	f04f 0400 	mov.w	r4, #0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	f7fc fa7a 	bl	8000214 <__aeabi_uldivmod>
 8003d20:	4603      	mov	r3, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d26:	e043      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0x26c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d28:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	f04f 0400 	mov.w	r4, #0
 8003d32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	ea01 0103 	and.w	r1, r1, r3
 8003d3e:	ea02 0204 	and.w	r2, r2, r4
 8003d42:	460b      	mov	r3, r1
 8003d44:	4614      	mov	r4, r2
 8003d46:	0160      	lsls	r0, r4, #5
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	015b      	lsls	r3, r3, #5
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003d5a:	1a5b      	subs	r3, r3, r1
 8003d5c:	eb64 0402 	sbc.w	r4, r4, r2
 8003d60:	01a6      	lsls	r6, r4, #6
 8003d62:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003d66:	019d      	lsls	r5, r3, #6
 8003d68:	1aed      	subs	r5, r5, r3
 8003d6a:	eb66 0604 	sbc.w	r6, r6, r4
 8003d6e:	00f3      	lsls	r3, r6, #3
 8003d70:	607b      	str	r3, [r7, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003d78:	607b      	str	r3, [r7, #4]
 8003d7a:	00eb      	lsls	r3, r5, #3
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003d82:	186d      	adds	r5, r5, r1
 8003d84:	eb46 0602 	adc.w	r6, r6, r2
 8003d88:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8003d8c:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8003d90:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8003d94:	4655      	mov	r5, sl
 8003d96:	465e      	mov	r6, fp
 8003d98:	4628      	mov	r0, r5
 8003d9a:	4631      	mov	r1, r6
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d9e:	f04f 0400 	mov.w	r4, #0
 8003da2:	461a      	mov	r2, r3
 8003da4:	4623      	mov	r3, r4
 8003da6:	f7fc fa35 	bl	8000214 <__aeabi_uldivmod>
 8003daa:	4603      	mov	r3, r0
 8003dac:	460c      	mov	r4, r1
 8003dae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003db0:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x298>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	0f1b      	lsrs	r3, r3, #28
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c

      sysclockfreq = pllvco/pllr;
 8003dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dc6:	e002      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x28a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x29c>)
 8003dca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3744      	adds	r7, #68	; 0x44
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	017d7840 	.word	0x017d7840

08003de8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 8083 	beq.w	8003f08 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e02:	4b95      	ldr	r3, [pc, #596]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d019      	beq.n	8003e42 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e0e:	4b92      	ldr	r3, [pc, #584]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d106      	bne.n	8003e28 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e1a:	4b8f      	ldr	r3, [pc, #572]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e26:	d00c      	beq.n	8003e42 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e28:	4b8b      	ldr	r3, [pc, #556]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e30:	2b0c      	cmp	r3, #12
 8003e32:	d112      	bne.n	8003e5a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e34:	4b88      	ldr	r3, [pc, #544]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e40:	d10b      	bne.n	8003e5a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e42:	4b85      	ldr	r3, [pc, #532]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d05b      	beq.n	8003f06 <HAL_RCC_OscConfig+0x11e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d157      	bne.n	8003f06 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e216      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x8a>
 8003e64:	4a7c      	ldr	r2, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e66:	4b7c      	ldr	r3, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e01d      	b.n	8003eae <HAL_RCC_OscConfig+0xc6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0xae>
 8003e7c:	4a76      	ldr	r2, [pc, #472]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4a73      	ldr	r2, [pc, #460]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e8a:	4b73      	ldr	r3, [pc, #460]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	e00b      	b.n	8003eae <HAL_RCC_OscConfig+0xc6>
 8003e96:	4a70      	ldr	r2, [pc, #448]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e98:	4b6f      	ldr	r3, [pc, #444]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4a6d      	ldr	r2, [pc, #436]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003ea4:	4b6c      	ldr	r3, [pc, #432]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d013      	beq.n	8003ede <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fd fe19 	bl	8001aec <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ebe:	f7fd fe15 	bl	8001aec <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	; 0x64
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e1db      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed0:	4b61      	ldr	r3, [pc, #388]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0xd6>
 8003edc:	e014      	b.n	8003f08 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fd fe05 	bl	8001aec <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee6:	f7fd fe01 	bl	8001aec <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b64      	cmp	r3, #100	; 0x64
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e1c7      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef8:	4b57      	ldr	r3, [pc, #348]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCC_OscConfig+0xfe>
 8003f04:	e000      	b.n	8003f08 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d06f      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f14:	4b50      	ldr	r3, [pc, #320]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d017      	beq.n	8003f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f20:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f2c:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f38:	4b47      	ldr	r3, [pc, #284]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d11c      	bne.n	8003f7e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f44:	4b44      	ldr	r3, [pc, #272]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d116      	bne.n	8003f7e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f50:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_OscConfig+0x180>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e18f      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f68:	493b      	ldr	r1, [pc, #236]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7c:	e03a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d020      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f86:	4b35      	ldr	r3, [pc, #212]	; (800405c <HAL_RCC_OscConfig+0x274>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fdae 	bl	8001aec <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f94:	f7fd fdaa 	bl	8001aec <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e170      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa6:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb2:	4929      	ldr	r1, [pc, #164]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003fb4:	4b28      	ldr	r3, [pc, #160]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
 8003fc6:	e015      	b.n	8003ff4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc8:	4b24      	ldr	r3, [pc, #144]	; (800405c <HAL_RCC_OscConfig+0x274>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fd fd8d 	bl	8001aec <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd6:	f7fd fd89 	bl	8001aec <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e14f      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f0      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d037      	beq.n	8004070 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d016      	beq.n	8004036 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004008:	4b15      	ldr	r3, [pc, #84]	; (8004060 <HAL_RCC_OscConfig+0x278>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400e:	f7fd fd6d 	bl	8001aec <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004016:	f7fd fd69 	bl	8001aec <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e12f      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_OscConfig+0x270>)
 800402a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x22e>
 8004034:	e01c      	b.n	8004070 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_RCC_OscConfig+0x278>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fd fd56 	bl	8001aec <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004042:	e00f      	b.n	8004064 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004044:	f7fd fd52 	bl	8001aec <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d908      	bls.n	8004064 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e118      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	42470000 	.word	0x42470000
 8004060:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	4b8a      	ldr	r3, [pc, #552]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e9      	bne.n	8004044 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8097 	beq.w	80041ac <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407e:	2300      	movs	r3, #0
 8004080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004082:	4b83      	ldr	r3, [pc, #524]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10f      	bne.n	80040ae <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	4a7f      	ldr	r2, [pc, #508]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004094:	4b7e      	ldr	r3, [pc, #504]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409c:	6413      	str	r3, [r2, #64]	; 0x40
 800409e:	4b7c      	ldr	r3, [pc, #496]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040aa:	2301      	movs	r3, #1
 80040ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b79      	ldr	r3, [pc, #484]	; (8004294 <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d118      	bne.n	80040ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ba:	4a76      	ldr	r2, [pc, #472]	; (8004294 <HAL_RCC_OscConfig+0x4ac>)
 80040bc:	4b75      	ldr	r3, [pc, #468]	; (8004294 <HAL_RCC_OscConfig+0x4ac>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c6:	f7fd fd11 	bl	8001aec <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ce:	f7fd fd0d 	bl	8001aec <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0d3      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	4b6c      	ldr	r3, [pc, #432]	; (8004294 <HAL_RCC_OscConfig+0x4ac>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d106      	bne.n	8004102 <HAL_RCC_OscConfig+0x31a>
 80040f4:	4a66      	ldr	r2, [pc, #408]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 80040f6:	4b66      	ldr	r3, [pc, #408]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004100:	e01c      	b.n	800413c <HAL_RCC_OscConfig+0x354>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b05      	cmp	r3, #5
 8004108:	d10c      	bne.n	8004124 <HAL_RCC_OscConfig+0x33c>
 800410a:	4a61      	ldr	r2, [pc, #388]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 800410c:	4b60      	ldr	r3, [pc, #384]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	f043 0304 	orr.w	r3, r3, #4
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
 8004116:	4a5e      	ldr	r2, [pc, #376]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004118:	4b5d      	ldr	r3, [pc, #372]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
 8004122:	e00b      	b.n	800413c <HAL_RCC_OscConfig+0x354>
 8004124:	4a5a      	ldr	r2, [pc, #360]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004126:	4b5a      	ldr	r3, [pc, #360]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	6713      	str	r3, [r2, #112]	; 0x70
 8004130:	4a57      	ldr	r2, [pc, #348]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004132:	4b57      	ldr	r3, [pc, #348]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	f023 0304 	bic.w	r3, r3, #4
 800413a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d015      	beq.n	8004170 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd fcd2 	bl	8001aec <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414a:	e00a      	b.n	8004162 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f7fd fcce 	bl	8001aec <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	; 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e092      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004162:	4b4b      	ldr	r3, [pc, #300]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0ee      	beq.n	800414c <HAL_RCC_OscConfig+0x364>
 800416e:	e014      	b.n	800419a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fd fcbc 	bl	8001aec <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004176:	e00a      	b.n	800418e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fd fcb8 	bl	8001aec <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e07c      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418e:	4b40      	ldr	r3, [pc, #256]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ee      	bne.n	8004178 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d105      	bne.n	80041ac <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a0:	4a3b      	ldr	r2, [pc, #236]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 80041a2:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d068      	beq.n	8004286 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041b4:	4b36      	ldr	r3, [pc, #216]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d060      	beq.n	8004282 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d145      	bne.n	8004254 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c8:	4b33      	ldr	r3, [pc, #204]	; (8004298 <HAL_RCC_OscConfig+0x4b0>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fd fc8d 	bl	8001aec <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fd fc89 	bl	8001aec <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e04f      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e8:	4b29      	ldr	r3, [pc, #164]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f4:	4926      	ldr	r1, [pc, #152]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	3b01      	subs	r3, #1
 8004210:	041b      	lsls	r3, r3, #16
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	071b      	lsls	r3, r3, #28
 8004222:	4313      	orrs	r3, r2
 8004224:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004226:	4b1c      	ldr	r3, [pc, #112]	; (8004298 <HAL_RCC_OscConfig+0x4b0>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd fc5e 	bl	8001aec <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004234:	f7fd fc5a 	bl	8001aec <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e020      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004246:	4b12      	ldr	r3, [pc, #72]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x44c>
 8004252:	e018      	b.n	8004286 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004254:	4b10      	ldr	r3, [pc, #64]	; (8004298 <HAL_RCC_OscConfig+0x4b0>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425a:	f7fd fc47 	bl	8001aec <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004262:	f7fd fc43 	bl	8001aec <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e009      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCC_OscConfig+0x4a8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f0      	bne.n	8004262 <HAL_RCC_OscConfig+0x47a>
 8004280:	e001      	b.n	8004286 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40023800 	.word	0x40023800
 8004294:	40007000 	.word	0x40007000
 8004298:	42470060 	.word	0x42470060

0800429c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e03f      	b.n	800432e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fc fd5a 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	68d2      	ldr	r2, [r2, #12]
 80042da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 faa1 	bl	8004828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	6912      	ldr	r2, [r2, #16]
 80042f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	6952      	ldr	r2, [r2, #20]
 8004300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	68d2      	ldr	r2, [r2, #12]
 8004310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	4613      	mov	r3, r2
 8004342:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b20      	cmp	r3, #32
 800434e:	d130      	bne.n	80043b2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_UART_Transmit_IT+0x26>
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e029      	b.n	80043b4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_UART_Transmit_IT+0x38>
 800436a:	2302      	movs	r3, #2
 800436c:	e022      	b.n	80043b4 <HAL_UART_Transmit_IT+0x7e>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2221      	movs	r2, #33	; 0x21
 8004392:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	68d2      	ldr	r2, [r2, #12]
 80043a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043ac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
  }
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10d      	bne.n	8004412 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <HAL_UART_IRQHandler+0x52>
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f98b 	bl	8004726 <UART_Receive_IT>
      return;
 8004410:	e0d1      	b.n	80045b6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80b0 	beq.w	800457a <HAL_UART_IRQHandler+0x1ba>
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_UART_IRQHandler+0x70>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80a5 	beq.w	800457a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_UART_IRQHandler+0x90>
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	f043 0201 	orr.w	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_UART_IRQHandler+0xb0>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	f043 0202 	orr.w	r2, r3, #2
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_UART_IRQHandler+0xd0>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004488:	f043 0204 	orr.w	r2, r3, #4
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00f      	beq.n	80044ba <HAL_UART_IRQHandler+0xfa>
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d104      	bne.n	80044ae <HAL_UART_IRQHandler+0xee>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b2:	f043 0208 	orr.w	r2, r3, #8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d078      	beq.n	80045b4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <HAL_UART_IRQHandler+0x11c>
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f925 	bl	8004726 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e6:	2b40      	cmp	r3, #64	; 0x40
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <HAL_UART_IRQHandler+0x144>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d031      	beq.n	8004568 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f86f 	bl	80045e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004514:	2b40      	cmp	r3, #64	; 0x40
 8004516:	d123      	bne.n	8004560 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	6952      	ldr	r2, [r2, #20]
 8004522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004526:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452c:	2b00      	cmp	r3, #0
 800452e:	d013      	beq.n	8004558 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	4a21      	ldr	r2, [pc, #132]	; (80045bc <HAL_UART_IRQHandler+0x1fc>)
 8004536:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453c:	4618      	mov	r0, r3
 800453e:	f7fd fd19 	bl	8001f74 <HAL_DMA_Abort_IT>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d016      	beq.n	8004576 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004552:	4610      	mov	r0, r2
 8004554:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004556:	e00e      	b.n	8004576 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f83b 	bl	80045d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455e:	e00a      	b.n	8004576 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f837 	bl	80045d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004566:	e006      	b.n	8004576 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f833 	bl	80045d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004574:	e01e      	b.n	80045b4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004576:	bf00      	nop
    return;
 8004578:	e01c      	b.n	80045b4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_UART_IRQHandler+0x1d6>
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f85c 	bl	800464c <UART_Transmit_IT>
    return;
 8004594:	e00f      	b.n	80045b6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_UART_IRQHandler+0x1f6>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8a3 	bl	80046f6 <UART_EndTransmit_IT>
    return;
 80045b0:	bf00      	nop
 80045b2:	e000      	b.n	80045b6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80045b4:	bf00      	nop
  }
}
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	08004625 	.word	0x08004625

080045c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6812      	ldr	r2, [r2, #0]
 80045f8:	68d2      	ldr	r2, [r2, #12]
 80045fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	6952      	ldr	r2, [r2, #20]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff ffc8 	bl	80045d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b21      	cmp	r3, #33	; 0x21
 800465e:	d143      	bne.n	80046e8 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004668:	d119      	bne.n	800469e <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	8812      	ldrh	r2, [r2, #0]
 8004678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800467c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d105      	bne.n	8004692 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	1c9a      	adds	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	621a      	str	r2, [r3, #32]
 8004690:	e00e      	b.n	80046b0 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	621a      	str	r2, [r3, #32]
 800469c:	e008      	b.n	80046b0 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	1c58      	adds	r0, r3, #1
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	6208      	str	r0, [r1, #32]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	4619      	mov	r1, r3
 80046be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10f      	bne.n	80046e4 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	68d2      	ldr	r2, [r2, #12]
 80046ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	68d2      	ldr	r2, [r2, #12]
 80046de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	68d2      	ldr	r2, [r2, #12]
 8004708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fb ff04 	bl	8000524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b22      	cmp	r3, #34	; 0x22
 8004738:	d171      	bne.n	800481e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004742:	d123      	bne.n	800478c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10e      	bne.n	8004770 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	1c9a      	adds	r2, r3, #2
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
 800476e:	e029      	b.n	80047c4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	b29b      	uxth	r3, r3
 8004778:	b2db      	uxtb	r3, r3
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	629a      	str	r2, [r3, #40]	; 0x28
 800478a:	e01b      	b.n	80047c4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6291      	str	r1, [r2, #40]	; 0x28
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	6852      	ldr	r2, [r2, #4]
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e00c      	b.n	80047c4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	1c59      	adds	r1, r3, #1
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6291      	str	r1, [r2, #40]	; 0x28
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	6852      	ldr	r2, [r2, #4]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	4619      	mov	r1, r3
 80047d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d120      	bne.n	800481a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	68d2      	ldr	r2, [r2, #12]
 80047e2:	f022 0220 	bic.w	r2, r2, #32
 80047e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	68d2      	ldr	r2, [r2, #12]
 80047f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	6952      	ldr	r2, [r2, #20]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff fed5 	bl	80045c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	e002      	b.n	8004820 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	e000      	b.n	8004820 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800481e:	2302      	movs	r3, #2
  }
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482c:	b0a3      	sub	sp, #140	; 0x8c
 800482e:	af00      	add	r7, sp, #0
 8004830:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004832:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004840:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	431a      	orrs	r2, r3
 8004852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	431a      	orrs	r2, r3
 8004858:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8004862:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004864:	6819      	ldr	r1, [r3, #0]
 8004866:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8004870:	f022 020c 	bic.w	r2, r2, #12
 8004874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004878:	4313      	orrs	r3, r2
 800487a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800487c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800488a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004892:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489a:	f040 8171 	bne.w	8004b80 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800489e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4ab4      	ldr	r2, [pc, #720]	; (8004b74 <UART_SetConfig+0x34c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d005      	beq.n	80048b4 <UART_SetConfig+0x8c>
 80048a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4ab2      	ldr	r2, [pc, #712]	; (8004b78 <UART_SetConfig+0x350>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	f040 80b1 	bne.w	8004a16 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7ff f932 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 80048b8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048be:	681d      	ldr	r5, [r3, #0]
 80048c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048c4:	4619      	mov	r1, r3
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4614      	mov	r4, r2
 80048ce:	18db      	adds	r3, r3, r3
 80048d0:	eb44 0404 	adc.w	r4, r4, r4
 80048d4:	185b      	adds	r3, r3, r1
 80048d6:	eb44 0402 	adc.w	r4, r4, r2
 80048da:	00e0      	lsls	r0, r4, #3
 80048dc:	6478      	str	r0, [r7, #68]	; 0x44
 80048de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80048e0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80048e4:	6478      	str	r0, [r7, #68]	; 0x44
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	643b      	str	r3, [r7, #64]	; 0x40
 80048ea:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80048ee:	eb13 0801 	adds.w	r8, r3, r1
 80048f2:	eb44 0902 	adc.w	r9, r4, r2
 80048f6:	4640      	mov	r0, r8
 80048f8:	4649      	mov	r1, r9
 80048fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f04f 0400 	mov.w	r4, #0
 8004902:	18db      	adds	r3, r3, r3
 8004904:	eb44 0404 	adc.w	r4, r4, r4
 8004908:	461a      	mov	r2, r3
 800490a:	4623      	mov	r3, r4
 800490c:	f7fb fc82 	bl	8000214 <__aeabi_uldivmod>
 8004910:	4603      	mov	r3, r0
 8004912:	460c      	mov	r4, r1
 8004914:	461a      	mov	r2, r3
 8004916:	4b99      	ldr	r3, [pc, #612]	; (8004b7c <UART_SetConfig+0x354>)
 8004918:	fba3 2302 	umull	r2, r3, r3, r2
 800491c:	095b      	lsrs	r3, r3, #5
 800491e:	011e      	lsls	r6, r3, #4
 8004920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004924:	4619      	mov	r1, r3
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	460b      	mov	r3, r1
 800492c:	4614      	mov	r4, r2
 800492e:	18db      	adds	r3, r3, r3
 8004930:	eb44 0404 	adc.w	r4, r4, r4
 8004934:	185b      	adds	r3, r3, r1
 8004936:	eb44 0402 	adc.w	r4, r4, r2
 800493a:	00e0      	lsls	r0, r4, #3
 800493c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800493e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004940:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004944:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	63bb      	str	r3, [r7, #56]	; 0x38
 800494a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800494e:	eb13 0801 	adds.w	r8, r3, r1
 8004952:	eb44 0902 	adc.w	r9, r4, r2
 8004956:	4640      	mov	r0, r8
 8004958:	4649      	mov	r1, r9
 800495a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f04f 0400 	mov.w	r4, #0
 8004962:	18db      	adds	r3, r3, r3
 8004964:	eb44 0404 	adc.w	r4, r4, r4
 8004968:	461a      	mov	r2, r3
 800496a:	4623      	mov	r3, r4
 800496c:	f7fb fc52 	bl	8000214 <__aeabi_uldivmod>
 8004970:	4603      	mov	r3, r0
 8004972:	460c      	mov	r4, r1
 8004974:	461a      	mov	r2, r3
 8004976:	4b81      	ldr	r3, [pc, #516]	; (8004b7c <UART_SetConfig+0x354>)
 8004978:	fba3 1302 	umull	r1, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2164      	movs	r1, #100	; 0x64
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	3332      	adds	r3, #50	; 0x32
 800498a:	4a7c      	ldr	r2, [pc, #496]	; (8004b7c <UART_SetConfig+0x354>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004998:	441e      	add	r6, r3
 800499a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800499e:	4619      	mov	r1, r3
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4614      	mov	r4, r2
 80049a8:	18db      	adds	r3, r3, r3
 80049aa:	eb44 0404 	adc.w	r4, r4, r4
 80049ae:	185b      	adds	r3, r3, r1
 80049b0:	eb44 0402 	adc.w	r4, r4, r2
 80049b4:	00e0      	lsls	r0, r4, #3
 80049b6:	6378      	str	r0, [r7, #52]	; 0x34
 80049b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80049ba:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80049be:	6378      	str	r0, [r7, #52]	; 0x34
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30
 80049c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80049c8:	eb13 0801 	adds.w	r8, r3, r1
 80049cc:	eb44 0902 	adc.w	r9, r4, r2
 80049d0:	4640      	mov	r0, r8
 80049d2:	4649      	mov	r1, r9
 80049d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f04f 0400 	mov.w	r4, #0
 80049dc:	18db      	adds	r3, r3, r3
 80049de:	eb44 0404 	adc.w	r4, r4, r4
 80049e2:	461a      	mov	r2, r3
 80049e4:	4623      	mov	r3, r4
 80049e6:	f7fb fc15 	bl	8000214 <__aeabi_uldivmod>
 80049ea:	4603      	mov	r3, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b62      	ldr	r3, [pc, #392]	; (8004b7c <UART_SetConfig+0x354>)
 80049f2:	fba3 1302 	umull	r1, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2164      	movs	r1, #100	; 0x64
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	3332      	adds	r3, #50	; 0x32
 8004a04:	4a5d      	ldr	r2, [pc, #372]	; (8004b7c <UART_SetConfig+0x354>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4433      	add	r3, r6
 8004a12:	60ab      	str	r3, [r5, #8]
 8004a14:	e240      	b.n	8004e98 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a16:	f7ff f86d 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 8004a1a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	673a      	str	r2, [r7, #112]	; 0x70
 8004a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4614      	mov	r4, r2
 8004a32:	18db      	adds	r3, r3, r3
 8004a34:	eb44 0404 	adc.w	r4, r4, r4
 8004a38:	185b      	adds	r3, r3, r1
 8004a3a:	eb44 0402 	adc.w	r4, r4, r2
 8004a3e:	00e0      	lsls	r0, r4, #3
 8004a40:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004a42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a44:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004a48:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004a52:	185d      	adds	r5, r3, r1
 8004a54:	eb44 0602 	adc.w	r6, r4, r2
 8004a58:	4628      	mov	r0, r5
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f04f 0400 	mov.w	r4, #0
 8004a64:	18db      	adds	r3, r3, r3
 8004a66:	eb44 0404 	adc.w	r4, r4, r4
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4623      	mov	r3, r4
 8004a6e:	f7fb fbd1 	bl	8000214 <__aeabi_uldivmod>
 8004a72:	4603      	mov	r3, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	461a      	mov	r2, r3
 8004a78:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <UART_SetConfig+0x354>)
 8004a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	011e      	lsls	r6, r3, #4
 8004a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a86:	4619      	mov	r1, r3
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4614      	mov	r4, r2
 8004a90:	18db      	adds	r3, r3, r3
 8004a92:	eb44 0404 	adc.w	r4, r4, r4
 8004a96:	185b      	adds	r3, r3, r1
 8004a98:	eb44 0402 	adc.w	r4, r4, r2
 8004a9c:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8004aa0:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8004aa4:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8004aa8:	4653      	mov	r3, sl
 8004aaa:	465c      	mov	r4, fp
 8004aac:	eb13 0a01 	adds.w	sl, r3, r1
 8004ab0:	eb44 0b02 	adc.w	fp, r4, r2
 8004ab4:	4650      	mov	r0, sl
 8004ab6:	4659      	mov	r1, fp
 8004ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f04f 0400 	mov.w	r4, #0
 8004ac0:	18db      	adds	r3, r3, r3
 8004ac2:	eb44 0404 	adc.w	r4, r4, r4
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4623      	mov	r3, r4
 8004aca:	f7fb fba3 	bl	8000214 <__aeabi_uldivmod>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <UART_SetConfig+0x354>)
 8004ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2164      	movs	r1, #100	; 0x64
 8004ade:	fb01 f303 	mul.w	r3, r1, r3
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	3332      	adds	r3, #50	; 0x32
 8004ae8:	4a24      	ldr	r2, [pc, #144]	; (8004b7c <UART_SetConfig+0x354>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004af6:	441e      	add	r6, r3
 8004af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004afc:	4619      	mov	r1, r3
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4614      	mov	r4, r2
 8004b06:	18db      	adds	r3, r3, r3
 8004b08:	eb44 0404 	adc.w	r4, r4, r4
 8004b0c:	185b      	adds	r3, r3, r1
 8004b0e:	eb44 0402 	adc.w	r4, r4, r2
 8004b12:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8004b16:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8004b1a:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8004b1e:	4643      	mov	r3, r8
 8004b20:	464c      	mov	r4, r9
 8004b22:	eb13 0801 	adds.w	r8, r3, r1
 8004b26:	eb44 0902 	adc.w	r9, r4, r2
 8004b2a:	4640      	mov	r0, r8
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f04f 0400 	mov.w	r4, #0
 8004b36:	18db      	adds	r3, r3, r3
 8004b38:	eb44 0404 	adc.w	r4, r4, r4
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4623      	mov	r3, r4
 8004b40:	f7fb fb68 	bl	8000214 <__aeabi_uldivmod>
 8004b44:	4603      	mov	r3, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <UART_SetConfig+0x354>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	; 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	3332      	adds	r3, #50	; 0x32
 8004b5e:	4a07      	ldr	r2, [pc, #28]	; (8004b7c <UART_SetConfig+0x354>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	4433      	add	r3, r6
 8004b6c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004b6e:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b70:	e192      	b.n	8004e98 <UART_SetConfig+0x670>
 8004b72:	bf00      	nop
 8004b74:	40011000 	.word	0x40011000
 8004b78:	40011400 	.word	0x40011400
 8004b7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4bc1      	ldr	r3, [pc, #772]	; (8004e8c <UART_SetConfig+0x664>)
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d005      	beq.n	8004b96 <UART_SetConfig+0x36e>
 8004b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4bc0      	ldr	r3, [pc, #768]	; (8004e90 <UART_SetConfig+0x668>)
 8004b90:	429a      	cmp	r2, r3
 8004b92:	f040 80bf 	bne.w	8004d14 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b96:	f7fe ffc1 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8004b9a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ba0:	681e      	ldr	r6, [r3, #0]
 8004ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4614      	mov	r4, r2
 8004bb0:	18db      	adds	r3, r3, r3
 8004bb2:	eb44 0404 	adc.w	r4, r4, r4
 8004bb6:	185b      	adds	r3, r3, r1
 8004bb8:	eb44 0402 	adc.w	r4, r4, r2
 8004bbc:	00e0      	lsls	r0, r4, #3
 8004bbe:	6278      	str	r0, [r7, #36]	; 0x24
 8004bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bc2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004bc6:	6278      	str	r0, [r7, #36]	; 0x24
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	623b      	str	r3, [r7, #32]
 8004bcc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004bd0:	eb13 0801 	adds.w	r8, r3, r1
 8004bd4:	eb44 0902 	adc.w	r9, r4, r2
 8004bd8:	4640      	mov	r0, r8
 8004bda:	4649      	mov	r1, r9
 8004bdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f04f 0400 	mov.w	r4, #0
 8004be4:	00a2      	lsls	r2, r4, #2
 8004be6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004be8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bea:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004bee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bf4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bf8:	f7fb fb0c 	bl	8000214 <__aeabi_uldivmod>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	461a      	mov	r2, r3
 8004c02:	4ba4      	ldr	r3, [pc, #656]	; (8004e94 <UART_SetConfig+0x66c>)
 8004c04:	fba3 2302 	umull	r2, r3, r3, r2
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	011d      	lsls	r5, r3, #4
 8004c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c10:	4619      	mov	r1, r3
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4614      	mov	r4, r2
 8004c1a:	18db      	adds	r3, r3, r3
 8004c1c:	eb44 0404 	adc.w	r4, r4, r4
 8004c20:	185b      	adds	r3, r3, r1
 8004c22:	eb44 0402 	adc.w	r4, r4, r2
 8004c26:	00e0      	lsls	r0, r4, #3
 8004c28:	61f8      	str	r0, [r7, #28]
 8004c2a:	69f8      	ldr	r0, [r7, #28]
 8004c2c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004c30:	61f8      	str	r0, [r7, #28]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004c3a:	eb13 0801 	adds.w	r8, r3, r1
 8004c3e:	eb44 0902 	adc.w	r9, r4, r2
 8004c42:	4640      	mov	r0, r8
 8004c44:	4649      	mov	r1, r9
 8004c46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f04f 0400 	mov.w	r4, #0
 8004c4e:	00a2      	lsls	r2, r4, #2
 8004c50:	657a      	str	r2, [r7, #84]	; 0x54
 8004c52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c54:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004c58:	657a      	str	r2, [r7, #84]	; 0x54
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004c5e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c62:	f7fb fad7 	bl	8000214 <__aeabi_uldivmod>
 8004c66:	4603      	mov	r3, r0
 8004c68:	460c      	mov	r4, r1
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4b89      	ldr	r3, [pc, #548]	; (8004e94 <UART_SetConfig+0x66c>)
 8004c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2164      	movs	r1, #100	; 0x64
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	; 0x32
 8004c80:	4a84      	ldr	r2, [pc, #528]	; (8004e94 <UART_SetConfig+0x66c>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c8c:	441d      	add	r5, r3
 8004c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c92:	4619      	mov	r1, r3
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	18db      	adds	r3, r3, r3
 8004c9e:	eb44 0404 	adc.w	r4, r4, r4
 8004ca2:	185b      	adds	r3, r3, r1
 8004ca4:	eb44 0402 	adc.w	r4, r4, r2
 8004ca8:	00e0      	lsls	r0, r4, #3
 8004caa:	6178      	str	r0, [r7, #20]
 8004cac:	6978      	ldr	r0, [r7, #20]
 8004cae:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004cb2:	6178      	str	r0, [r7, #20]
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004cbc:	eb13 0801 	adds.w	r8, r3, r1
 8004cc0:	eb44 0902 	adc.w	r9, r4, r2
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f04f 0400 	mov.w	r4, #0
 8004cd0:	00a2      	lsls	r2, r4, #2
 8004cd2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cd6:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004cda:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ce0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ce4:	f7fb fa96 	bl	8000214 <__aeabi_uldivmod>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	461a      	mov	r2, r3
 8004cee:	4b69      	ldr	r3, [pc, #420]	; (8004e94 <UART_SetConfig+0x66c>)
 8004cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2164      	movs	r1, #100	; 0x64
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a64      	ldr	r2, [pc, #400]	; (8004e94 <UART_SetConfig+0x66c>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	442b      	add	r3, r5
 8004d10:	60b3      	str	r3, [r6, #8]
 8004d12:	e0c1      	b.n	8004e98 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d14:	f7fe feee 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 8004d18:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d26:	4619      	mov	r1, r3
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4614      	mov	r4, r2
 8004d30:	18db      	adds	r3, r3, r3
 8004d32:	eb44 0404 	adc.w	r4, r4, r4
 8004d36:	185b      	adds	r3, r3, r1
 8004d38:	eb44 0402 	adc.w	r4, r4, r2
 8004d3c:	00e6      	lsls	r6, r4, #3
 8004d3e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8004d42:	00dd      	lsls	r5, r3, #3
 8004d44:	462b      	mov	r3, r5
 8004d46:	4634      	mov	r4, r6
 8004d48:	185d      	adds	r5, r3, r1
 8004d4a:	eb44 0602 	adc.w	r6, r4, r2
 8004d4e:	4628      	mov	r0, r5
 8004d50:	4631      	mov	r1, r6
 8004d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f04f 0400 	mov.w	r4, #0
 8004d5a:	00a5      	lsls	r5, r4, #2
 8004d5c:	677d      	str	r5, [r7, #116]	; 0x74
 8004d5e:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8004d60:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8004d64:	677d      	str	r5, [r7, #116]	; 0x74
 8004d66:	009c      	lsls	r4, r3, #2
 8004d68:	673c      	str	r4, [r7, #112]	; 0x70
 8004d6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004d6e:	f7fb fa51 	bl	8000214 <__aeabi_uldivmod>
 8004d72:	4603      	mov	r3, r0
 8004d74:	460c      	mov	r4, r1
 8004d76:	461a      	mov	r2, r3
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <UART_SetConfig+0x66c>)
 8004d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	011d      	lsls	r5, r3, #4
 8004d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d86:	4619      	mov	r1, r3
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4614      	mov	r4, r2
 8004d90:	18db      	adds	r3, r3, r3
 8004d92:	eb44 0404 	adc.w	r4, r4, r4
 8004d96:	185b      	adds	r3, r3, r1
 8004d98:	eb44 0402 	adc.w	r4, r4, r2
 8004d9c:	00e0      	lsls	r0, r4, #3
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	00d8      	lsls	r0, r3, #3
 8004daa:	60b8      	str	r0, [r7, #8]
 8004dac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004db0:	eb13 0801 	adds.w	r8, r3, r1
 8004db4:	eb44 0902 	adc.w	r9, r4, r2
 8004db8:	4640      	mov	r0, r8
 8004dba:	4649      	mov	r1, r9
 8004dbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f04f 0400 	mov.w	r4, #0
 8004dc4:	00a6      	lsls	r6, r4, #2
 8004dc6:	66fe      	str	r6, [r7, #108]	; 0x6c
 8004dc8:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 8004dca:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8004dce:	66fe      	str	r6, [r7, #108]	; 0x6c
 8004dd0:	009c      	lsls	r4, r3, #2
 8004dd2:	66bc      	str	r4, [r7, #104]	; 0x68
 8004dd4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004dd8:	f7fb fa1c 	bl	8000214 <__aeabi_uldivmod>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	460c      	mov	r4, r1
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <UART_SetConfig+0x66c>)
 8004de4:	fba3 1302 	umull	r1, r3, r3, r2
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	2164      	movs	r1, #100	; 0x64
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	3332      	adds	r3, #50	; 0x32
 8004df6:	4a27      	ldr	r2, [pc, #156]	; (8004e94 <UART_SetConfig+0x66c>)
 8004df8:	fba2 1303 	umull	r1, r3, r2, r3
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e02:	441d      	add	r5, r3
 8004e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4614      	mov	r4, r2
 8004e12:	18db      	adds	r3, r3, r3
 8004e14:	eb44 0404 	adc.w	r4, r4, r4
 8004e18:	185b      	adds	r3, r3, r1
 8004e1a:	eb44 0402 	adc.w	r4, r4, r2
 8004e1e:	00e0      	lsls	r0, r4, #3
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	00d8      	lsls	r0, r3, #3
 8004e2c:	6038      	str	r0, [r7, #0]
 8004e2e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8004e32:	eb13 0801 	adds.w	r8, r3, r1
 8004e36:	eb44 0902 	adc.w	r9, r4, r2
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f04f 0400 	mov.w	r4, #0
 8004e46:	00a6      	lsls	r6, r4, #2
 8004e48:	667e      	str	r6, [r7, #100]	; 0x64
 8004e4a:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 8004e4c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8004e50:	667e      	str	r6, [r7, #100]	; 0x64
 8004e52:	009c      	lsls	r4, r3, #2
 8004e54:	663c      	str	r4, [r7, #96]	; 0x60
 8004e56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004e5a:	f7fb f9db 	bl	8000214 <__aeabi_uldivmod>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	460c      	mov	r4, r1
 8004e62:	461a      	mov	r2, r3
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <UART_SetConfig+0x66c>)
 8004e66:	fba3 1302 	umull	r1, r3, r3, r2
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	2164      	movs	r1, #100	; 0x64
 8004e6e:	fb01 f303 	mul.w	r3, r1, r3
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	3332      	adds	r3, #50	; 0x32
 8004e78:	4a06      	ldr	r2, [pc, #24]	; (8004e94 <UART_SetConfig+0x66c>)
 8004e7a:	fba2 1303 	umull	r1, r3, r2, r3
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	442b      	add	r3, r5
 8004e86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e88:	6093      	str	r3, [r2, #8]
}
 8004e8a:	e005      	b.n	8004e98 <UART_SetConfig+0x670>
 8004e8c:	40011000 	.word	0x40011000
 8004e90:	40011400 	.word	0x40011400
 8004e94:	51eb851f 	.word	0x51eb851f
 8004e98:	bf00      	nop
 8004e9a:	378c      	adds	r7, #140	; 0x8c
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea2:	bf00      	nop

08004ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004edc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ea8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004eaa:	e003      	b.n	8004eb4 <LoopCopyDataInit>

08004eac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004eae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004eb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004eb2:	3104      	adds	r1, #4

08004eb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004eb4:	480b      	ldr	r0, [pc, #44]	; (8004ee4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004eb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004eba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ebc:	d3f6      	bcc.n	8004eac <CopyDataInit>
  ldr  r2, =_sbss
 8004ebe:	4a0b      	ldr	r2, [pc, #44]	; (8004eec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ec0:	e002      	b.n	8004ec8 <LoopFillZerobss>

08004ec2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ec2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ec4:	f842 3b04 	str.w	r3, [r2], #4

08004ec8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004eca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ecc:	d3f9      	bcc.n	8004ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ece:	f7fb ff15 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ed2:	f000 f811 	bl	8004ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ed6:	f7fb fc1b 	bl	8000710 <main>
  bx  lr    
 8004eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004edc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ee0:	080050d8 	.word	0x080050d8
  ldr  r0, =_sdata
 8004ee4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ee8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004eec:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004ef0:	20000248 	.word	0x20000248

08004ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ef4:	e7fe      	b.n	8004ef4 <ADC_IRQHandler>
	...

08004ef8 <__libc_init_array>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	4e0d      	ldr	r6, [pc, #52]	; (8004f30 <__libc_init_array+0x38>)
 8004efc:	4c0d      	ldr	r4, [pc, #52]	; (8004f34 <__libc_init_array+0x3c>)
 8004efe:	1ba4      	subs	r4, r4, r6
 8004f00:	10a4      	asrs	r4, r4, #2
 8004f02:	2500      	movs	r5, #0
 8004f04:	42a5      	cmp	r5, r4
 8004f06:	d109      	bne.n	8004f1c <__libc_init_array+0x24>
 8004f08:	4e0b      	ldr	r6, [pc, #44]	; (8004f38 <__libc_init_array+0x40>)
 8004f0a:	4c0c      	ldr	r4, [pc, #48]	; (8004f3c <__libc_init_array+0x44>)
 8004f0c:	f000 f82c 	bl	8004f68 <_init>
 8004f10:	1ba4      	subs	r4, r4, r6
 8004f12:	10a4      	asrs	r4, r4, #2
 8004f14:	2500      	movs	r5, #0
 8004f16:	42a5      	cmp	r5, r4
 8004f18:	d105      	bne.n	8004f26 <__libc_init_array+0x2e>
 8004f1a:	bd70      	pop	{r4, r5, r6, pc}
 8004f1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f20:	4798      	blx	r3
 8004f22:	3501      	adds	r5, #1
 8004f24:	e7ee      	b.n	8004f04 <__libc_init_array+0xc>
 8004f26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f2a:	4798      	blx	r3
 8004f2c:	3501      	adds	r5, #1
 8004f2e:	e7f2      	b.n	8004f16 <__libc_init_array+0x1e>
 8004f30:	080050d0 	.word	0x080050d0
 8004f34:	080050d0 	.word	0x080050d0
 8004f38:	080050d0 	.word	0x080050d0
 8004f3c:	080050d4 	.word	0x080050d4

08004f40 <memcpy>:
 8004f40:	b510      	push	{r4, lr}
 8004f42:	1e43      	subs	r3, r0, #1
 8004f44:	440a      	add	r2, r1
 8004f46:	4291      	cmp	r1, r2
 8004f48:	d100      	bne.n	8004f4c <memcpy+0xc>
 8004f4a:	bd10      	pop	{r4, pc}
 8004f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f54:	e7f7      	b.n	8004f46 <memcpy+0x6>

08004f56 <memset>:
 8004f56:	4402      	add	r2, r0
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d100      	bne.n	8004f60 <memset+0xa>
 8004f5e:	4770      	bx	lr
 8004f60:	f803 1b01 	strb.w	r1, [r3], #1
 8004f64:	e7f9      	b.n	8004f5a <memset+0x4>
	...

08004f68 <_init>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr

08004f74 <_fini>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	bf00      	nop
 8004f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7a:	bc08      	pop	{r3}
 8004f7c:	469e      	mov	lr, r3
 8004f7e:	4770      	bx	lr
